<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-11-10T02:33:32-05:00</updated><id>http://localhost:4000//</id><title type="html">Alex Sorokoletov Notes</title><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><entry><title type="html">My favorite extensions for Visual Studio for Mac</title><link href="http://localhost:4000/2017/11/10/favorite-extensions-visual-studio-mac-xamarin/" rel="alternate" type="text/html" title="My favorite extensions for Visual Studio for Mac" /><published>2017-11-10T00:00:00-05:00</published><updated>2017-11-10T00:00:00-05:00</updated><id>http://localhost:4000/2017/11/10/favorite-extensions-visual-studio-mac-xamarin</id><content type="html" xml:base="http://localhost:4000/2017/11/10/favorite-extensions-visual-studio-mac-xamarin/">&lt;p&gt;4 extensions to transform Visual Studio for Mac to even more powerful IDE. 
Each of them, when discovered, allowed me to save my time and simplify my workflow.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;nuget-package-management&quot;&gt;1. NuGet Package Management&lt;/h3&gt;
&lt;p&gt;This one I found out quite recently. If you ever used VS 2017, you know that it has much nicer and comfortable UI to manage NuGet packagets.
You can install and update multiple selected packages at once.&lt;/p&gt;

&lt;p&gt;I found it very useful, especially when installing next MvvmCross update and keeping all other packages unchanged.&lt;/p&gt;

&lt;p&gt;VS4Mac team, you should have that built in!
Thanks to @brent.l for the tip.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mrward/monodevelop-nuget-extensions&quot;&gt;Download NuGet Package Management extensions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href=&quot;https://github.com/mrward/monodevelop-addins&quot;&gt;https://github.com/mrward/monodevelop-addins&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;defaultdesigner&quot;&gt;2. DefaultDesigner&lt;/h3&gt;
&lt;p&gt;This is a Xamarin Studio &amp;amp; Visual Studio for Mac add-in to open .xib and .storyboard files with Xcode Interface Builder by default.
By double clicking it.&lt;/p&gt;

&lt;p&gt;Awesome timesaver. Since I edit all storyboards in XCode only, this is a must for me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/colbylwilliams/DefaultDesigner&quot;&gt;Download DefaultDesigner for Visual Studio for Mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href=&quot;https://github.com/colbylwilliams/DefaultDesigner&quot;&gt;https://github.com/colbylwilliams/DefaultDesigner&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;mfractor&quot;&gt;3. MFractor&lt;/h3&gt;
&lt;p&gt;Kudos to Matthew for this amazing mega-extension (comes in two flavors, lite and pro).
I can’t even start to describe what you can do with it, instead go and check the website https://www.mfractor.com/&lt;/p&gt;

&lt;p&gt;Some of the features I like:
- XAML helpers essential for any Xamarin.Forms developer
- Android Resource intellinsense and help with navigation and replace with resource lookup
- Point out missing constructors for Xamarin.Android views/classes
- many other things I have not learned yet&lt;/p&gt;

&lt;p&gt;MFactor Pro: &lt;a href=&quot;https://www.mfractor.com/pages/download&quot;&gt;https://www.mfractor.com/products/mfractor-for-visual-studio-mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MFractor Lite: &lt;a href=&quot;https://www.mfractor.com/pages/download&quot;&gt;https://www.mfractor.com/pages/download&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sortandremoveusings&quot;&gt;4. SortAndRemoveUsings&lt;/h3&gt;
&lt;p&gt;Shameless plug - this is my own extension. It helps you by automatically sort and remove usings when you save a C# file.
Extending VS4Mac was moderately easy, and I do that action anyway before commit since I like to keep my code clean.&lt;/p&gt;

&lt;p&gt;No magic involved regarding usings here, instead of going through context menu this add-in does that on file save.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alexsorokoletov/VisualStudioMac.SortRemoveUsings/releases/tag/1.1&quot;&gt;Download SortAndRemoveUsings for Visual Studio 4 Mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href=&quot;https://github.com/alexsorokoletov/VisualStudioMac.SortRemoveUsings&quot;&gt;https://github.com/alexsorokoletov/VisualStudioMac.SortRemoveUsings&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;your-recommendations&quot;&gt;Your recommendations?&lt;/h3&gt;

&lt;p&gt;Which extensions do you use? Let me know in the comments!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2017/11/10/favorite-extensions-visual-studio-mac-xamarin/&amp;amp;text=My favorite extensions for Visual Studio for Mac &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">4 extensions to transform Visual Studio for Mac to even more powerful IDE. 
Each of them, when discovered, allowed me to save my time and simplify my workflow.</summary></entry><entry><title type="html">Easy way to create Xamarin.iOS binding from CocoaPods</title><link href="http://localhost:4000/2017/02/05/objc-automatic-easy-way-to-create-xamarin-bindings-ios/" rel="alternate" type="text/html" title="Easy way to create Xamarin.iOS binding from CocoaPods" /><published>2017-02-05T00:00:00-05:00</published><updated>2017-02-05T00:00:00-05:00</updated><id>http://localhost:4000/2017/02/05/objc-automatic-easy-way-to-create-xamarin-bindings-ios</id><content type="html" xml:base="http://localhost:4000/2017/02/05/objc-automatic-easy-way-to-create-xamarin-bindings-ios/">&lt;p&gt;Hey, Xamarin developers!
Developing iOS apps quite often includes using native libraries and Xamarin for iOS supports this by creating bindings.
This was 100% manual process until &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt;. After, &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt; began supporting &lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; (it is NuGet for iOS developers, so everything is in there). 
However, it doesn’t work in many cases (it can’t build something or reflect ObjectiveC code correctly).&lt;/p&gt;

&lt;p&gt;Also, &lt;code class=&quot;highlighter-rouge&quot;&gt;sharpie&lt;/code&gt; doesn’t support dependencies within pods. This is where the new &lt;a href=&quot;https://github.com/alexsorokoletov/objc-automatic&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt;&lt;/a&gt; started.&lt;/p&gt;

&lt;p&gt;But first, let me show you a demo how easy it is to create Xamarin.iOS binding for cocoapod.
&lt;!--more--&gt;&lt;/p&gt;
&lt;iframe width=&quot;630&quot; height=&quot;394&quot; src=&quot;https://www.useloom.com/embed/e17d23d0ec3711e689c9c95ad27ead9a&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;prelude&quot;&gt;Prelude&lt;/h3&gt;

&lt;p&gt;Imagine you have to use &lt;a href=&quot;https://cocoapods.org/pods/FirebaseAnalytics&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt;&lt;/a&gt; in your Xamarin app (Now, there is a NuGet for that, but let’s rewind to the point where there wasn’t one).
You would go ahead and create binding for that library, right. Unfortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt; is what I call an umbrella pod. It has no code, just dependencies.&lt;/p&gt;

&lt;p&gt;So, instead, you need to go and create bindings for pods like: &lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseCore&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseInstanceID&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleInterchangeUtilities&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleSymbolUtilities&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleToolboxForMac/NSData+zlib&lt;/code&gt;.
Literally, out of nowhere amount of work exploded. Now you need 5 bindings instead of just one. ObjectiveSharpie won’t help us with that.&lt;/p&gt;

&lt;p&gt;Interesting, &lt;a href=&quot;https://cocoapods.org/pods/FirebaseCore&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseCore&lt;/code&gt;&lt;/a&gt; also has dependencies. 
So, you need to create 5 Xamarin.iOS binding projects, do the code, reference them correspondingly and then you will have a binding for &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Few questions arise: 
- How do you distribute that?
    Single binary? 
    Many binaries?
    NuGet package or packages?
- How do you version that?
    1.0.0 is not an option, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt; is updated often.
    Oh, yes. Each of these pods has it’s own version.&lt;/p&gt;

&lt;p&gt;If you choose NuGet packages, then you also need to reference packages same way as pods and Xamarin.iOS projects.&lt;/p&gt;

&lt;p&gt;Frankly, I tried to do that manually. After &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Core&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt; I understood this is hard.
I couldn’t imagine I will do that again when version 3.7.x of Firebase is released. Not mentioning sometimes you have to redo bindings to fix incorrect signature or binary&lt;/p&gt;

&lt;h3 id=&quot;automate-all-the-things&quot;&gt;Automate all the things.&lt;/h3&gt;

&lt;p&gt;We’ve been using F# FAKE for Xamarin iOS/Android builds for a long time and I love it.
I decided to try F# FAKE with this problem as well.&lt;/p&gt;

&lt;p&gt;First, the tool generates correct tree of dependencies.
Downloads all metadata about pods. Versions, frameworks, linker flags, dependencies, etc.&lt;/p&gt;

&lt;p&gt;Then, for each of the pods it create a subfolder inside &lt;code class=&quot;highlighter-rouge&quot;&gt;bindings&lt;/code&gt; and puts there Xamarin.iOS binding project with C# API surface generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;sharpie&lt;/code&gt;.
It adds all linker flags, puts the iOS binary in there, adjusts the references to the dependencies (other Xamarin.iOS binding projects).&lt;/p&gt;

&lt;p&gt;Now, you can build these Xamarin.iOS bindings using Xamarin Studio.&lt;/p&gt;

&lt;p&gt;Turns out, it takes quite a time for XS, so the tool also creates &lt;code class=&quot;highlighter-rouge&quot;&gt;podname.build.sh&lt;/code&gt; script to go ahead and &lt;code class=&quot;highlighter-rouge&quot;&gt;MSBuild&lt;/code&gt; all the projects in correct order.&lt;/p&gt;

&lt;p&gt;So the flow would be: run the script, see the errors, fix the errors, run it again (you can probably put it on –watch do run continously).&lt;/p&gt;

&lt;p&gt;Now you have the .dll files with bindings. (pss, there is also a linker side of that story, take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;Linker.cs&lt;/code&gt; files)&lt;/p&gt;

&lt;h3 id=&quot;demo-time&quot;&gt;Demo time!&lt;/h3&gt;
&lt;p&gt;Here are few videos showing how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt; and how it works internally.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.useloom.com/share/7679bec0ec3911e6b8fde34d395e0c71&quot;&gt;Binding Firebase/Analytics using objc-automatic&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;630&quot; height=&quot;394&quot; src=&quot;https://www.useloom.com/embed/7679bec0ec3911e6b8fde34d395e0c71&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://www.useloom.com/share/f756df30ec3b11e6b8fde34d395e0c71&quot;&gt;How objc-automatic works&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;630&quot; height=&quot;394&quot; src=&quot;https://www.useloom.com/embed/f756df30ec3b11e6b8fde34d395e0c71&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;nuget-side-of-things&quot;&gt;NuGet side of things&lt;/h3&gt;
&lt;p&gt;For the NuGet distribution, you want to have same tree of packages with same versioning.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt; tool does that for you. Along with projects, it generates &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.config&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.nuspec&lt;/code&gt; files for each of the CocoaPods.
It also enhances &lt;code class=&quot;highlighter-rouge&quot;&gt;podname.build.sh&lt;/code&gt; script to build packages and restore packages in correct order when building Xamarin.iOS binding projects.
For this goal tool creates local temporary NuGet feed and publishes built packages and restores dependencies from this source.&lt;/p&gt;

&lt;p&gt;You want to be sure people can later restore our packages and have everything working (at least - compiling).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.nuspec&lt;/code&gt; files will contain versions, metadata, everything needed.&lt;/p&gt;

&lt;h3 id=&quot;does-it-work&quot;&gt;Does it work?&lt;/h3&gt;
&lt;p&gt;It worked for quite many cocoapods I used to test it with. More importantly, it worked with Firebase pods. 
For the &lt;code class=&quot;highlighter-rouge&quot;&gt;lottie-ios&lt;/code&gt; it took around 1 minute to generate the &lt;code class=&quot;highlighter-rouge&quot;&gt;bindings&lt;/code&gt; infrastructure (projects, NuGet package specs).
Around 1 more minute to run &lt;code class=&quot;highlighter-rouge&quot;&gt;lottie-ios.build.sh&lt;/code&gt; and have NuGet package ready for publishing.&lt;/p&gt;

&lt;p&gt;I’m not trying to brag here, just saying that basically compiling lottie manually and launching Xamarin Studio would take around that time.
In first place, the &lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt; tool aims for complex pod bindings with dependencies.&lt;/p&gt;

&lt;p&gt;One binding sometimes is really hard to crack. Having 6 of them is even harder.&lt;/p&gt;

&lt;h4 id=&quot;dicsoveries&quot;&gt;Dicsoveries&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Turns out, &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt; can’t bind all the cocoapods.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt; doesn’t bind correctly some of the classes from iOS frameworks (misses casign of the managed class name)&lt;/li&gt;
  &lt;li&gt;Sometimes you need to direct &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt; into correct set of header files, otherwise it skips some classes. C# API surface shows less than it should&lt;/li&gt;
  &lt;li&gt;Xamarin.iOS linker doesn’t understand that Xamarin.iOS app might be using a binding that might be using another binding. The latter one gets lost durign compilation process.&lt;/li&gt;
  &lt;li&gt;Xamarin.iOS binding projects are actually very smart with &lt;code class=&quot;highlighter-rouge&quot;&gt;.framework&lt;/code&gt;s.&lt;/li&gt;
  &lt;li&gt;You can test complex NuGet package dependency scenario locally using local NuGet source&lt;/li&gt;
  &lt;li&gt;You can create Xamarin.iOS binding with just Terminal and VS Code. Nice.&lt;/li&gt;
  &lt;li&gt;It is so hard to debug F# FAKE scripts (ionide-fake VSCode extension doesn’t help)&lt;/li&gt;
  &lt;li&gt;CocoaPods spec can be a mess. Definitely moving forward I need to restructure this piece.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexsorokoletov/objc-automatic&quot;&gt;Source code on GitHub: objc-automatic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/cross-platform/macios/binding/objective-sharpie/&quot;&gt;ObjectiveSharpie from Xamarin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/cross-platform/macios/binding/&quot;&gt;Xamarin Documentation - Binding Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;This tool works as it is. There are still things to improve and fix (ZendeskSDK and AWSCognito pods are examples).
Not all metadata flows from pod to NuGet package.
Tool is opensourced and everyone is welcome to use it and improve it.&lt;/p&gt;

&lt;h4 id=&quot;thank-you&quot;&gt;Thank you&lt;/h4&gt;
&lt;p&gt;Big thanks to Xamarin Team (Miguel and Bill) who helped taming Xamarin.iOS linker.
Thanks for F# FAKE team, this is a great tool to start with.&lt;/p&gt;

&lt;p&gt;And thank you for your interest and feedback. 
I appreciate any positive or negative feedback about &lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt; and value any success or failure story using this tool.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2017/02/05/objc-automatic-easy-way-to-create-xamarin-bindings-ios/&amp;amp;text=Easy way to create Xamarin.iOS binding from CocoaPods &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Hey, Xamarin developers!
Developing iOS apps quite often includes using native libraries and Xamarin for iOS supports this by creating bindings.
This was 100% manual process until ObjectiveSharpie. After, ObjectiveSharpie began supporting CocoaPods (it is NuGet for iOS developers, so everything is in there). 
However, it doesn’t work in many cases (it can’t build something or reflect ObjectiveC code correctly).

Also, sharpie doesn’t support dependencies within pods. This is where the new objc-automatic started.

But first, let me show you a demo how easy it is to create Xamarin.iOS binding for cocoapod.</summary></entry><entry><title type="html">Android Maps Utils for Xamarin updated with new features and NuGet</title><link href="http://localhost:4000/2016/12/12/android-maps-utils-updated-published-nuget/" rel="alternate" type="text/html" title="Android Maps Utils for Xamarin updated with new features and NuGet" /><published>2016-12-12T00:00:00-05:00</published><updated>2016-12-12T00:00:00-05:00</updated><id>http://localhost:4000/2016/12/12/android-maps-utils-updated-published-nuget</id><content type="html" xml:base="http://localhost:4000/2016/12/12/android-maps-utils-updated-published-nuget/">&lt;p&gt;I’ve updated Xamarin Android Maps Utils recently and now one can get this as a &lt;a href=&quot;https://www.nuget.org/packages/Xamarin.Android.Maps.Utils&quot;&gt;NuGet package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Install-Package Xamarin.Android.Maps.Utils -Pre&lt;/code&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Currently project has dependency on the latest and greatest Google Play Services package from Xamarin (32.961.0) and requires “TargetFramework” 7.0 (which should be by default for all new projects anyway).
Besides NuGet, project has now latest (0.4.4) java code inside bringing more new features for users.&lt;/p&gt;

&lt;p&gt;Now you get (shameless plug from original repo):&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Marker clustering — handles the display of a large number of points&lt;/p&gt;

  &lt;p&gt;Heat maps — display a large number of points as a heat map&lt;/p&gt;

  &lt;p&gt;IconGenerator — display text on your Markers&lt;/p&gt;

  &lt;p&gt;Poly decoding and encoding — compact encoding for paths, interoperability with Maps API web services&lt;/p&gt;

  &lt;p&gt;Spherical geometry — for example: computeDistance, computeHeading, computeArea&lt;/p&gt;

  &lt;p&gt;KML — displays KML data&lt;/p&gt;

  &lt;p&gt;GeoJSON — displays and styles GeoJSON data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/googlemaps/android-maps-utils&quot;&gt;Google’s Github has a nice GIF demo of what Android Maps Utils can do now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, I was not getting any notifications about activities on this project on Github, now it’s fixed. Thank you for the feedback and pull requests!&lt;/p&gt;

&lt;p&gt;Keep it coming!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xamarin/GooglePlayServicesComponents#versioning&quot;&gt;Versioning of Xamarin.GooglePlayServices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexsorokoletov/Xamarin.Android.Maps.Utils&quot;&gt;Xamarin.Android.Maps.Utils on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/12/12/android-maps-utils-updated-published-nuget/&amp;amp;text=Android Maps Utils for Xamarin updated with new features and NuGet &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">I’ve updated Xamarin Android Maps Utils recently and now one can get this as a NuGet package.

Install-Package Xamarin.Android.Maps.Utils -Pre</summary></entry><entry><title type="html">Easiest way to migrate from Xamarin.Insights to HockeyApp</title><link href="http://localhost:4000/2016/12/11/migrating-from-xamarin-insights-to-hockeyapp-sdk/" rel="alternate" type="text/html" title="Easiest way to migrate from Xamarin.Insights to HockeyApp" /><published>2016-12-11T00:00:00-05:00</published><updated>2016-12-11T00:00:00-05:00</updated><id>http://localhost:4000/2016/12/11/migrating-from-xamarin-insights-to-hockeyapp-sdk</id><content type="html" xml:base="http://localhost:4000/2016/12/11/migrating-from-xamarin-insights-to-hockeyapp-sdk/">&lt;p&gt;Xamarin.Insights was and still is a great exception tracking system for Xamarin applications. However&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… Do also note that Xamarin Insights is now considered to be end of life: since the acquisition by Microsoft, Insights has been deprecated in favour of HockeyApp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many of us have apps integrated with Xamarin.Insights. Now it’s time to ditch Xamarin.Insights and put HockeyApp SDK instead.
HockeyApp has different integration points and API and some of the features from Insights are missing.&lt;/p&gt;

&lt;p&gt;What would be the easiest way to migrate from Xamarin Insights to HockeyApp?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;meet-dtinsightstohockey&quot;&gt;Meet DT.InsightsToHockey&lt;/h3&gt;
&lt;p&gt;With this new project and NuGet package, all you have to do is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to remove Xamarin.Insights package and reference&lt;/li&gt;
  &lt;li&gt;and  install DT.InsightsToHockey package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, update the API key (change Insights’ one to HockeyApp app id) and you good to go.&lt;/p&gt;

&lt;p&gt;Quite simple, right?&lt;/p&gt;

&lt;p&gt;Here is how it looks in the project:&lt;/p&gt;

&lt;p&gt;Before:
&lt;img src=&quot;/assets/insights_to_hockeyapp_before.png&quot; alt=&quot;Xamarin Insights package in references before&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After:
&lt;img src=&quot;/assets/insights_to_hockeyapp_after.png&quot; alt=&quot;DT.InsightsToHockey package in references after&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Events already coming to HockeyApp after the changes:
&lt;img src=&quot;/assets/insights_to_hockeyapp_events.png&quot; alt=&quot;Events coming to HockeyApp after change&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works?&lt;/h3&gt;
&lt;p&gt;Under the hood, package exposes exactly same API under same namespace, reporting and integrating with HockeyApp instead.&lt;/p&gt;

&lt;p&gt;Literally, you have to change no code, just references.
Project supports PCL and iOS as of now, Android is in progress. I’ve tried to match all features available in Insights to HockeyApp SDK features. HockeyApp team was very helpful providing some feedback on features parity.&lt;/p&gt;

&lt;p&gt;I will be glad to receive any feedback and help with this project (Android and UWP are waiting!)&lt;/p&gt;

&lt;h4 id=&quot;additional-information&quot;&gt;Additional information&lt;/h4&gt;
&lt;p&gt;I recommended to take a look at features and limitations of HockeyApp SDK for each specific platform.&lt;/p&gt;

&lt;p&gt;HockeyApp is powerful and well-know metrics and crash tracking system. 
You can do in-app updates for iOS/Android, password-protected screens in the app (very well suited for diagnostics/admin screens). You can integrate a feedback page as well.&lt;/p&gt;

&lt;p&gt;This fall Azure integrated HockeyApp with Azure. Data coming to HockeyApp can be available in App Insights for analysis and intelligence.
It is very powerful way to see and analyze events coming from your app. &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/access-hockeyapp-data-in-ai-with-hockeyapp-bridge-app/&quot;&gt;Step by step guidance from AppInsights team.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading. Please let me know your thoughts on the subject.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexsorokoletov/DT.XamarinInsightsToHockeyApp&quot;&gt;DT.InsightsToHockey on Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitstadium/HockeySDK-Xamarin&quot;&gt;HockeyApp SDK for Xamarin&lt;/a&gt; and for &lt;a href=&quot;https://github.com/bitstadium/HockeySDK-iOS&quot;&gt;iOS&lt;/a&gt; and &lt;a href=&quot;https://github.com/bitstadium/HockeySDK-Android&quot;&gt;Android&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/insights/&quot;&gt;Xamarin.Insights Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xamarin.com/faq#qha1&quot;&gt;What is happening with Xamarin.Insights&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/access-hockeyapp-data-in-ai-with-hockeyapp-bridge-app/&quot;&gt;Exploring HockeyApp data in Application Insights: introducing the Bridge App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hockeyapp.net/blog/2016/08/30/custom-events-public-preview.html&quot;&gt;Custom events for everybody&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/12/11/migrating-from-xamarin-insights-to-hockeyapp-sdk/&amp;amp;text=Easiest way to migrate from Xamarin.Insights to HockeyApp &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Xamarin.Insights was and still is a great exception tracking system for Xamarin applications. However


  … Do also note that Xamarin Insights is now considered to be end of life: since the acquisition by Microsoft, Insights has been deprecated in favour of HockeyApp.


Many of us have apps integrated with Xamarin.Insights. Now it’s time to ditch Xamarin.Insights and put HockeyApp SDK instead.
HockeyApp has different integration points and API and some of the features from Insights are missing.

What would be the easiest way to migrate from Xamarin Insights to HockeyApp?</summary></entry><entry><title type="html">Named parameters in Func&amp;lt;T&amp;gt;/Action&amp;lt;T&amp;gt; type in C#?</title><link href="http://localhost:4000/2016/11/29/naming-func-action-of-t-arguments/" rel="alternate" type="text/html" title="Named parameters in Func&amp;lt;T&amp;gt;/Action&amp;lt;T&amp;gt; type in C#?" /><published>2016-11-29T00:00:00-05:00</published><updated>2016-11-29T00:00:00-05:00</updated><id>http://localhost:4000/2016/11/29/naming-func-action-of-t-arguments</id><content type="html" xml:base="http://localhost:4000/2016/11/29/naming-func-action-of-t-arguments/">&lt;p&gt;If you ever wondered, why Visual Studio (and Visual Studio for Mac) suggest you to name your lambda arguments with names like arg1, arg2 … argN and so on…&lt;/p&gt;

&lt;p&gt;Here is a common situation where somewhere in your library or helper class you have a method taking in &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&amp;lt;T&amp;gt;&lt;/code&gt;.
&lt;img src=&quot;/assets/naming_func_of_t_declaration.png&quot; alt=&quot;Definition of your method using Func/Action classes&quot; /&gt;
and then when you want to use this method VS suggests you following names: arg1 and arg2.
Like there is nothing better than that :)
&lt;img src=&quot;/assets/naming_func_of_t_default_behavior.png&quot; alt=&quot;Definition of your method using Func/Action classes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a cheap and easy &lt;strong&gt;solution for that&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Define your own delegate with same signature as &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T1,T2,T3&amp;gt;&lt;/code&gt; you are using already.&lt;/li&gt;
  &lt;li&gt;Specify intended names for these arguments (in my case arg1 could be better described as service, where arg2 is actually a token).&lt;/li&gt;
  &lt;li&gt;In original method, replace Func&lt;T&gt; with this new delegate.&lt;/T&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/naming_func_of_t_custom_named_delegate.png&quot; alt=&quot;Defining custom delegate with correct names and using it in the original method&quot; /&gt;
After these changes when you are going to use the method, you will see intellisense suggesting correct names and not generic ones.
&lt;img src=&quot;/assets/naming_func_of_t_improved_names.png&quot; alt=&quot;Now you get better names from VS as a suggestion&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;pros-and-cons&quot;&gt;Pros and Cons&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Pros&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You, your team and other people using the API that you expose (whether internally in the app or in the library or NuGet) will see better names and probably will use these names.&lt;/li&gt;
  &lt;li&gt;So code will be easier to read and maintain.&lt;/li&gt;
  &lt;li&gt;If you decide to extend the delegate, you will have to do it in one place only.&lt;/li&gt;
  &lt;li&gt;It’s fun to have smart code suggestions!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Cons&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bit of extra work and extra code&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bonus&quot;&gt;Bonus&lt;/h4&gt;
&lt;p&gt;You can have optional &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt; arguments!
In the example below you can omit &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; argument completely.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/naming_func_t_bonus.png&quot; alt=&quot;Optional arguments in Func of T csharp&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/11/29/naming-func-action-of-t-arguments/&amp;amp;text=Named parameters in Func&amp;lt;T&amp;gt;/Action&amp;lt;T&amp;gt; type in C#? &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">If you ever wondered, why Visual Studio (and Visual Studio for Mac) suggest you to name your lambda arguments with names like arg1, arg2 … argN and so on…

Here is a common situation where somewhere in your library or helper class you have a method taking in Func&amp;lt;T&amp;gt; or Action&amp;lt;T&amp;gt;.

and then when you want to use this method VS suggests you following names: arg1 and arg2.
Like there is nothing better than that :)


There is a cheap and easy solution for that.


  Define your own delegate with same signature as Func&amp;lt;T&amp;gt; or Func&amp;lt;T1,T2,T3&amp;gt; you are using already.
  Specify intended names for these arguments (in my case arg1 could be better described as service, where arg2 is actually a token).
  In original method, replace Func with this new delegate.



After these changes when you are going to use the method, you will see intellisense suggesting correct names and not generic ones.</summary></entry><entry><title type="html">.editorconfig support in Visual Studio 2017</title><link href="http://localhost:4000/2016/11/28/editorconfig-in-visualstudio/" rel="alternate" type="text/html" title=".editorconfig support in Visual Studio 2017" /><published>2016-11-28T00:00:00-05:00</published><updated>2016-11-28T00:00:00-05:00</updated><id>http://localhost:4000/2016/11/28/editorconfig-in-visualstudio</id><content type="html" xml:base="http://localhost:4000/2016/11/28/editorconfig-in-visualstudio/">&lt;p&gt;Just recently, Visual Studio team published a post on &lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudio/2016/11/28/productivity-in-visual-studio-2017-rc/&quot;&gt;great features coming to the VS 2017 that will increase your productivity&lt;/a&gt;. Among those, one small but powerful feature coming to the Visual Studio.&lt;/p&gt;

&lt;p&gt;It’s .editorconfig support.
What’s so great about this?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;EditorConfig support is a good first step to support all platforms and editors of choice uniformely. Working with Xamarin apps from Windows and OS X in distributed teams, I learned hard way how tabs (gosh, again?) could be disruptive to smooth team work.&lt;/p&gt;

&lt;h4 id=&quot;what-is-editorconfig&quot;&gt;What is EditorConfig?&lt;/h4&gt;
&lt;p&gt;Quote from &lt;a href=&quot;http://editorconfig.org/&quot;&gt;EditorConfig website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, having .editorconfig in the root of your project will guarantee that any editor supporting it will comply with defined settings and will keep your codebase in the same format as team agreed.&lt;/p&gt;

&lt;h4 id=&quot;what-can-we-config-in-the-editor-then&quot;&gt;What can we config in the editor then?&lt;/h4&gt;
&lt;p&gt;EditorConfig in VS 2017 supports following settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;indent_style&lt;/li&gt;
  &lt;li&gt;indent_size&lt;/li&gt;
  &lt;li&gt;tab_width&lt;/li&gt;
  &lt;li&gt;end_of_line&lt;/li&gt;
  &lt;li&gt;charset&lt;/li&gt;
  &lt;li&gt;trim_trailing_whitespace&lt;/li&gt;
  &lt;li&gt;insert_final_newline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options&quot;&gt;Overview how to setup .editorconfig&lt;/a&gt; is available in the Microsoft Docs.&lt;/p&gt;

&lt;p&gt;I will quote one paragraph from the docs since it’s very well written:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… EditorConfig files enable you to maintain consistent coding styles and settings for a language … in a codebase regardless of the editor or IDE you use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;EditorConfig doesn’t support full set of C# formatting rules, so it’s not a replacement for formatting settings in VS or code formatting policy in Xamarin Studio (XS stores settings in a .sln file).&lt;/p&gt;

&lt;p&gt;I am sure we will see more tools/features coming to support different editors and environments to keep consistent coding styles.&lt;/p&gt;

&lt;p&gt;If you are interested in the topic, please read my recent article on having &lt;a href=&quot;.2016/11/13/csharp-standard-style/&quot;&gt;standard C# formatting style&lt;/a&gt; and feel free to share your opinion.&lt;/p&gt;

&lt;h5 id=&quot;additional-reading&quot;&gt;Additional reading&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;http://editorconfig.org/#download&quot;&gt;EditorConfig.org plugins for IDE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudio/2016/11/16/visual-studio-2017-rc/&quot;&gt;Overview of VS 2017 Release Candidate&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/11/28/editorconfig-in-visualstudio/&amp;amp;text=.editorconfig support in Visual Studio 2017 &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Just recently, Visual Studio team published a post on great features coming to the VS 2017 that will increase your productivity. Among those, one small but powerful feature coming to the Visual Studio.

It’s .editorconfig support.
What’s so great about this?</summary></entry><entry><title type="html">C# Standard Style - single source of formatting truth</title><link href="http://localhost:4000/2016/11/13/csharp-standard-style/" rel="alternate" type="text/html" title="C# Standard Style - single source of formatting truth" /><published>2016-11-13T00:00:00-05:00</published><updated>2016-11-13T00:00:00-05:00</updated><id>http://localhost:4000/2016/11/13/csharp-standard-style</id><content type="html" xml:base="http://localhost:4000/2016/11/13/csharp-standard-style/">&lt;p&gt;Months ago &lt;a href=&quot;https://www.paralect.com/team&quot;&gt;Andrew Orsich&lt;/a&gt; told me about this great tool called &lt;a href=&quot;http://standardjs.com/&quot;&gt;javascript standard style&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Absolutely amazing.&lt;/p&gt;

&lt;p&gt;What it does is just formats code with one pre-configured, non-changeable, non-customizeable, non-arguable style. &lt;strong&gt;You either use it or not&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After that, all discussions about curly braces, tabs and spaces go to void. Done.&lt;/p&gt;

&lt;p&gt;I’d like to have this for C#.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We all had enough of discussions whether use tabs or spaces (it’s still happens), where to put braces, how do we name methods and variables. I feel this is especially important now, when .NET is opensource, when C# is being used for iOS and Android development, when many of C# developers are working on Mac and Linux.&lt;/p&gt;

&lt;p&gt;Frankly, we are all already using &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff926074.aspx&quot;&gt;Microsoft C# Coding Conventions&lt;/a&gt; in some way. It’s just these slight modifications that make us spend time on formatting and arguing about these changes or undoing them.&lt;/p&gt;

&lt;p&gt;I want my team and everyone developing in C# focus on functionality and forget about formatting forever.&lt;/p&gt;

&lt;p&gt;Let’s make it happen.&lt;/p&gt;

&lt;h2 id=&quot;there-should-be-something-for-this-right&quot;&gt;There should be something for this, right?&lt;/h2&gt;

&lt;p&gt;Tools already exist, however…&lt;/p&gt;

&lt;p&gt;One can use Visual Studio settings and configure C# formatting. Then do the same with Xamarin Studio.(strictly speaking, having XS format C# code exactly same way as VS is not possible). 
And what about VS Code?&lt;/p&gt;

&lt;p&gt;There is an &lt;a href=&quot;https://github.com/editorconfig/editorconfig-vscode&quot;&gt;.editorconfig support for Visual Studio&lt;/a&gt; but it’s covering just part of formatting questions.&lt;/p&gt;

&lt;p&gt;ReSharper is another candidate, however, it doesn’t work with Xamarin Studio and you can customize rules.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/onovotny&quot;&gt;Oren&lt;/a&gt; kindly pointed there is a &lt;a href=&quot;https://github.com/dotnet/codeformatter&quot;&gt;dotnet/CodeFormatter project&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/contributing.md&quot;&gt;Roslyn and .NET Core teams use styles&lt;/a&gt; enforced by the tool.&lt;/p&gt;

&lt;p&gt;Good old StyleCop/FxCop might be suitable as well, but again, you can and have to customize it.&lt;/p&gt;

&lt;p&gt;Unfortunately, all available tools are customizable. As long as you use them, there will be always someone who will do something his way.  Again, I want to have this binary and simple choice. Use it or don’t use it.&lt;/p&gt;

&lt;h2 id=&quot;should-we-build-another-tool&quot;&gt;Should we build another tool?&lt;/h2&gt;

&lt;p&gt;Actually, CodeFormatter is a good candidate for becoming a single source of truth. It has default rules baked in, it runs on Windows and Mono and it’s built with Roslyn and people are already using it. Here is a &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md&quot;&gt;list of rules CodeFormatter enforces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I feel like we just need to extend it and build VS extension, Xamarin Add-in and VS Code extension to make experience seamless.&lt;/p&gt;

&lt;h2 id=&quot;its-just-your-crazy-idea&quot;&gt;It’s just your crazy idea&lt;/h2&gt;

&lt;p&gt;According to the post from Roslyn team, I’m not alone&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2015/02/09/automatic-code-formatter-released-to-github/&quot;&gt;Automatic code formatter released to GitHub&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We strongly believe that having a consistent style greatly increases the readability and maintainability of a code base. The individual style decisions themselves are subjective, the key is the consistency of the decisions. As such the .NET team has a set of style guidelines for all C# code written by the team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;i-have-another-ideaopinion&quot;&gt;I have another idea/opinion&lt;/h2&gt;

&lt;p&gt;I would love to hear your feedback and thoughs on this idea. Feel free to contact me or comment this article and please share it with your team and friends.&lt;/p&gt;

&lt;h2 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h2&gt;

&lt;h4 id=&quot;i-do-not-want-to-re-format-my-solution&quot;&gt;I do not want to re-format my solution.&lt;/h4&gt;
&lt;p&gt;You don’t need to re-format existing codebase unless you want. When you start your next project, this is the best time to start using C# Standard Format.&lt;/p&gt;

&lt;h4 id=&quot;why-we-should-enforce-style-a-and-not-enforce-style-b&quot;&gt;Why we should enforce style A and not enforce style B.&lt;/h4&gt;

&lt;p&gt;Discussing specific style settings is not the goal of this post.&lt;/p&gt;

&lt;h4 id=&quot;i-will-not-use-this-c-standard-formatting&quot;&gt;I will not use this C# standard formatting.&lt;/h4&gt;

&lt;p&gt;Fine, it’s “use it or don’t”. Nothing will change for people that don’t want to use a non-customizeable set of rules. A lot of free time will come to those that want to use it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/11/13/csharp-standard-style/&amp;amp;text=C# Standard Style - single source of formatting truth &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Months ago Andrew Orsich told me about this great tool called javascript standard style.

Absolutely amazing.

What it does is just formats code with one pre-configured, non-changeable, non-customizeable, non-arguable style. You either use it or not.

After that, all discussions about curly braces, tabs and spaces go to void. Done.

I’d like to have this for C#.</summary></entry><entry><title type="html">MaterialDateTimePicker bindings for Xamarin.Android apps</title><link href="http://localhost:4000/2016/02/29/material-date-time-picker-available-for-xamarin-android-apps-bindings/" rel="alternate" type="text/html" title="MaterialDateTimePicker bindings for Xamarin.Android apps" /><published>2016-02-29T00:00:00-05:00</published><updated>2016-02-29T00:00:00-05:00</updated><id>http://localhost:4000/2016/02/29/material-date-time-picker-available-for-xamarin-android-apps-bindings</id><content type="html" xml:base="http://localhost:4000/2016/02/29/material-date-time-picker-available-for-xamarin-android-apps-bindings/">&lt;h3 id=&quot;bindings-for-materialdatetimepicker-for-xamarinandroid-apps&quot;&gt;Bindings for MaterialDateTimePicker for Xamarin.Android apps&lt;/h3&gt;

&lt;p&gt;One of the good libraries for Android apps made in Material design is the &lt;a href=&quot;https://github.com/wdullaer/MaterialDateTimePicker&quot;&gt;“Material DateTime Picker”&lt;/a&gt; from &lt;a href=&quot;https://github.com/wdullaer&quot;&gt;@wdullaer&lt;/a&gt;.
Here is a short article how to create Xamarin.Android bindings library to consume that awesome picker in your Xamarin.Android applications.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;TLDR:  &lt;a href=&quot;https://github.com/alexsorokoletov/Xamarin.Wdullaer.MaterialDateTimePicker&quot;&gt;https://github.com/alexsorokoletov/Xamarin.Wdullaer.MaterialDateTimePicker&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;creating-java-library-bindings-for-xamarinandroid&quot;&gt;Creating java library bindings for Xamarin.Android&lt;/h3&gt;

&lt;p&gt;There is an official guide from Xamarin: 
&lt;a href=&quot;https://developer.xamarin.com/guides/android/advanced_topics/java_integration_overview/binding-a-java-library/&quot;&gt;Binding a Java Library - Consuming Java libraries from C#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we need to get the JAR/AAR file.
Looking at &lt;a href=&quot;https://github.com/wdullaer/MaterialDateTimePicker&quot;&gt;github page&lt;/a&gt;, we can see Maven banner. It means that we can grab a binary from Maven so let’s go there and do it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://repo1.maven.org/maven2/com/wdullaer/materialdatetimepicker/2.2.0/&quot;&gt;https://repo1.maven.org/maven2/com/wdullaer/materialdatetimepicker/2.2.0/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, following the Xamarin guide, we will see 3 errors:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
Vendor/MaterialDateTimePickerBinding/obj/Debug/generated/src/Com.Wdullaer.Materialdatetimepicker.Date.MonthView.cs(34,34): 
  Error CS0533: `Com.Wdullaer.Materialdatetimepicker.Date.MonthView.MonthViewTouchHelper.GetVisibleVirtualViews(System.Collections.Generic.IList&amp;lt;Java.Lang.Integer&amp;gt;)' 
  hides inherited abstract member `Android.Support.V4.Widget.ExploreByTouchHelper.GetVisibleVirtualViews(System.Collections.Generic.IList&amp;lt;Java.Lang.Integer&amp;gt;)'
  (CS0533) (MaterialDateTimePickerBinding)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 Vendor/MaterialDateTimePickerBinding/obj/Debug/generated/src/Com.Wdullaer.Materialdatetimepicker.Date.MonthView.cs(36,36): Error CS0534: `Com.Wdullaer.Materialdatetimepicker.Date.MonthView.MonthViewTouchHelper' does not implement inherited abstract member `Android.Support.V4.Widget.ExploreByTouchHelper.GetVisibleVirtualViews(System.Collections.Generic.IList&amp;lt;Java.Lang.Integer&amp;gt;)' (CS0534) (MaterialDateTimePickerBinding)
&lt;/code&gt;
 and&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 Vendor/MaterialDateTimePickerBinding/obj/Debug/generated/src/Com.Wdullaer.Materialdatetimepicker.Time.Timepoint.cs(23,23): Error CS0535: `Com.Wdullaer.Materialdatetimepicker.Time.Timepoint' does not implement interface member `Java.Lang.IComparable.CompareTo(Java.Lang.Object)' (CS0535) (MaterialDateTimePickerBinding)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1st and 2nd are pretty simple. As these methods most definitely will not be consumed from C# side, we can just remove these methods from bindings.&lt;/p&gt;

&lt;p&gt;For that we use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;remove-node /&amp;gt;&lt;/code&gt; instruction in Metadata.xml.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;remove-node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/package[@name='com.wdullaer.materialdatetimepicker.date']/class[@name='MonthView.MonthViewTouchHelper']/method[@name='getVisibleVirtualViews' and count(parameter)=1 and parameter[1][@type='java.util.List&amp;amp;lt;java.lang.Integer&amp;amp;gt;']]&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;remove-node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/package[@name='com.wdullaer.materialdatetimepicker.date']/class[@name='MonthView.MonthViewTouchHelper']&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To solve 3rd problem we need to add a partial class to Additions folder:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;    
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Com.Wdullaer.Materialdatetimepicker.Time&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
     * add partial class due to Java generics and IComparable interface in Xamarin.Android
     * Vendor/MaterialDateTimePickerBinding/obj/Debug/generated/src/Com.Wdullaer.Materialdatetimepicker.Time.Timepoint.cs(23,23): Error CS0535: 'Com.Wdullaer.Materialdatetimepicker.Time.Timepoint' does not implement interface member 'Java.Lang.IComparable.CompareTo(Java.Lang.Object)' (CS0535) (MaterialDateTimePickerBinding)
     * https://forums.xamarin.com/discussion/1950/binding-jar-file-with-class-that-implements-java-lang-icomparable
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Timepoint&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IComparable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CompareTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CompareTo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timepoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Solution to this issue I found on &lt;a href=&quot;https://forums.xamarin.com/discussion/38247/binding-issue-with-android-support-v4-widget-explorebytouchhelper-getvisiblevirtualviews&quot;&gt;Xamarin Forums&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, very helpful were comments and examples from &lt;a href=&quot;https://github.com/brendanzagaeski&quot;&gt;brendanzagaeski&lt;/a&gt; with different approaches to different java-to-csharp binding problems. Links to these examples are in the end of the page.&lt;/p&gt;

&lt;h3 id=&quot;jaraar-dependencies&quot;&gt;JAR/AAR dependencies&lt;/h3&gt;
&lt;p&gt;This library we are binding now has only one dependency:
&lt;a href=&quot;https://github.com/wdullaer/MaterialDateTimePicker/blob/master/library/build.gradle#L23&quot;&gt;https://github.com/wdullaer/MaterialDateTimePicker/blob/master/library/build.gradle#L23&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a &lt;code class=&quot;highlighter-rouge&quot;&gt;com.android.support:support-v4:23.1.1&lt;/code&gt; which translates to Xamarin Nuget package called Xamarin.Android.Support.v4 of version 23.1.1.&lt;/p&gt;

&lt;p&gt;So we will just add this Nuget package to our bindings project and that’s it.
Clean and Build the project and you should see 0 errors.
Yaay!&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-this-library-examples&quot;&gt;How to use this library (examples)&lt;/h3&gt;

&lt;p&gt;On C# side what you need to do is following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;reference the bindings project in your app project&lt;/li&gt;
  &lt;li&gt;in your activity implement interface OnTimeSetListener/OnDateSetListener&lt;/li&gt;
  &lt;li&gt;create a datepicker and show it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These steps are described in the &lt;a href=&quot;https://github.com/wdullaer/MaterialDateTimePicker/blob/master/README.md&quot;&gt;Readme.md file of the original library&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//implement OnDateSetListener
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseActionBarView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HomeViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wdullaer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Materialdatetimepicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatePickerDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOnDateSetListener&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;        
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnChooseDateButtonClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Calendar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wdullaer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Materialdatetimepicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatePickerDialog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dpd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wdullaer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Materialdatetimepicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatePickerDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NewInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CalendarField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CalendarField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CalendarField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DayOfMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dpd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FragmentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Datepickerdialog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnDateSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wdullaer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Materialdatetimepicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DatePickerDialog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sure you are using the same version of Xamarin.Android.Support.v4 package in your application project.&lt;/p&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/material-date-time-picker-xamarin-android.png&quot; alt=&quot;Material Date Time Picker in Xamarin.Android app&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source code&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/alexsorokoletov/Xamarin.Wdullaer.MaterialDateTimePicker&quot;&gt;Xamarin.Wdullaer.MaterialDateTimePicker&lt;/a&gt; github repository. 
Clone it and use it or just add as a submodule.&lt;/p&gt;

&lt;h3 id=&quot;improving-further&quot;&gt;Improving further&lt;/h3&gt;

&lt;p&gt;One thing definitely open for improvement is parameter names. Right now in many places it’s just p0, p1, p2, p3.&lt;/p&gt;

&lt;p&gt;Naming them hour, minute, second, isAmPm would make code cleaner and easier to understand.&lt;/p&gt;

&lt;p&gt;So if you feel like fixing something feel free to submit pull request. (Or if you know how to fix these names automaticall - let me know, please).&lt;/p&gt;

&lt;h3 id=&quot;helpful-links&quot;&gt;Helpful links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;My other Xamarin.Android bindings:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://dreamteam-mobile.com/blog/2015/04/tutorial-android-float-label-binding-for-xamarin-android/&quot;&gt;Tutorial – Android float label binding for Xamarin.Android&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://sorokoletov.com/2015/12/28/android-maps-utils-available-for-xamarin-android-apps-bindings/&quot;&gt;Tutorial – Android-maps-utils bindings for Xamarin.Android apps&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;brendanzagaeski Metadata.xml examples:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/brendanzagaeski/c32d65c21e152799af69&quot;&gt;https://gist.github.com/brendanzagaeski/c32d65c21e152799af69&lt;/a&gt;
&lt;a href=&quot;https://gist.github.com/brendanzagaeski/6d1052a8b76f9067548e&quot;&gt;https://gist.github.com/brendanzagaeski/6d1052a8b76f9067548e&lt;/a&gt;
&lt;a href=&quot;https://gist.github.com/brendanzagaeski/69f490e31ca6a71136ff&quot;&gt;https://gist.github.com/brendanzagaeski/69f490e31ca6a71136ff&lt;/a&gt;
&lt;a href=&quot;https://gist.github.com/brendanzagaeski/3868e30b85a1feb1181b&quot;&gt;https://gist.github.com/brendanzagaeski/3868e30b85a1feb1181b&lt;/a&gt;
&lt;a href=&quot;https://gist.github.com/brendanzagaeski/9834034&quot;&gt;https://gist.github.com/brendanzagaeski/9834034&lt;/a&gt;
&lt;a href=&quot;https://gist.github.com/brendanzagaeski/9607158&quot;&gt;https://gist.github.com/brendanzagaeski/9607158&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/02/29/material-date-time-picker-available-for-xamarin-android-apps-bindings/&amp;amp;text=MaterialDateTimePicker bindings for Xamarin.Android apps &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Bindings for MaterialDateTimePicker for Xamarin.Android apps

One of the good libraries for Android apps made in Material design is the “Material DateTime Picker” from @wdullaer.
Here is a short article how to create Xamarin.Android bindings library to consume that awesome picker in your Xamarin.Android applications.</summary></entry><entry><title type="html">gMaps for Windows Phone got 100k reviews!</title><link href="http://localhost:4000/2016/02/22/gmaps-got-100000-reviews-in-store/" rel="alternate" type="text/html" title="gMaps for Windows Phone got 100k reviews!" /><published>2016-02-22T00:00:00-05:00</published><updated>2016-02-22T00:00:00-05:00</updated><id>http://localhost:4000/2016/02/22/gmaps-got-100000-reviews-in-store</id><content type="html" xml:base="http://localhost:4000/2016/02/22/gmaps-got-100000-reviews-in-store/">&lt;p&gt;Monitoring app reviews with Reviews Reader app &lt;a href=&quot;http://twitter.com/winreviews&quot;&gt;@winreviews&lt;/a&gt;, I finally noticed gMaps got 100k of reviews!&lt;/p&gt;

&lt;p&gt;Thank you, users! We are reading all of them, believe it or not!
&lt;!--more--&gt;
&lt;img src=&quot;/assets/gmaps-got-100k-reviews.png&quot; alt=&quot;gMaps is top free navigation app for Windows Phone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have any ideas how to make the app better, or any other feedback, feel free to contact us using &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#103;&amp;#109;&amp;#097;&amp;#112;&amp;#115;&amp;#046;&amp;#102;&amp;#101;&amp;#101;&amp;#100;&amp;#098;&amp;#097;&amp;#099;&amp;#107;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;gmaps feedback email&lt;/a&gt;
 address or &lt;a href=&quot;https://gmaps.uservoice.com/&quot;&gt;gMaps uservoice&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/02/22/gmaps-got-100000-reviews-in-store/&amp;amp;text=gMaps for Windows Phone got 100k reviews! &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Monitoring app reviews with Reviews Reader app @winreviews, I finally noticed gMaps got 100k of reviews!

Thank you, users! We are reading all of them, believe it or not!</summary></entry><entry><title type="html">Coding for fun - AT&amp;amp;T signal levels on route from DC to Snowshoe, WV</title><link href="http://localhost:4000/2016/01/05/coding-for-fun-att-signal-strength-dc-to-snowshoe-ios/" rel="alternate" type="text/html" title="Coding for fun - AT&amp;T signal levels on route from DC to Snowshoe, WV" /><published>2016-01-05T00:00:00-05:00</published><updated>2016-01-05T00:00:00-05:00</updated><id>http://localhost:4000/2016/01/05/coding-for-fun-att-signal-strength-dc-to-snowshoe-ios</id><content type="html" xml:base="http://localhost:4000/2016/01/05/coding-for-fun-att-signal-strength-dc-to-snowshoe-ios/">&lt;p&gt;We go the &lt;a href=&quot;http://snowshoemtn.com&quot;&gt;Snowshoe ski resort&lt;/a&gt; almost every weekend when there is snow.
Driving there takes up to 5 hours.
As long as you drive off the interstate you loose your cell signal.&lt;/p&gt;

&lt;p&gt;Last year we had to learn how to drive and communicate in a disconnected world. We now know the route by heart, we know stops, we know which restaurants or gas stations have Wi-Fi. We also got some low-power FRS radios to have more flexibility during our trips.&lt;/p&gt;

&lt;p&gt;Honestly, I was always wondering why T-Mobile was so bad in this area. This spring I switched to AT&amp;amp;T to compare the coverage on Outer Banks (where T-Mobile is also failing to get you even basic coverage).
Now it`s winter and it’s time to check out AT&amp;amp;T coverage in our favorite skiing area.&lt;/p&gt;

&lt;p&gt;Let’s see how we do that and what we find
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;Why&lt;/h3&gt;
&lt;p&gt;As the article says, point is get some code just for fun. And see, if switching from T-Mobile to AT&amp;amp;T makes any sense.
And see, maybe there is a reason why we have almost no coverage off the interstates.&lt;/p&gt;

&lt;h3 id=&quot;technical-details&quot;&gt;Technical details&lt;/h3&gt;
&lt;p&gt;So, I had macbook with OS X and Windows 10, iPhone 6 and Lumia 950 and Lumia 925. First idea was to have Lumia 950 with AT&amp;amp;T and Lumia 925 with T-Mobile run same app along the route and then compare results. Unfortunately, I forgot my USB C cable so 950 died on the way there. 
So plan changed and I got an iOS app and did a AT&amp;amp;T cellular network signal level log on the way back.&lt;/p&gt;

&lt;p&gt;Interesting that iOS has no public API to get cellular service signal level. There was some way in iOS 4.2 days &lt;a href=&quot;https://github.com/valexa/VAFieldTest&quot;&gt;VAFieldTest&lt;/a&gt;. Doesn’t work now.
However, there is a way to get a signal level on iOS 9 devices. Kind gentleman shared the idea on Stack Overflow: &lt;a href=&quot;http://stackoverflow.com/a/34389611/883738&quot;&gt;Measuring cellular signal strength&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was enough for the first version.&lt;/p&gt;

&lt;p&gt;You can get the app from github - &lt;a href=&quot;https://github.com/alexsorokoletov/SignalLogger&quot;&gt;github.com/alexsorokoletov/SignalLogger&lt;/a&gt;. App tracks GPS and signal level every 10 seconds, while tracking screen stays active, all results are exported to CSV and emailed to you after you stop tracking. Keep it simple.&lt;/p&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;
&lt;p&gt;Gist with raw CSV data: &lt;a href=&quot;https://gist.github.com/alexsorokoletov/0ce68926804dee671563&quot;&gt;DC to Snowshoe ATT signal strength data.csv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using QGIS I was able to get the results on the map:&lt;/p&gt;

&lt;p&gt;This is a complete route from DC to Snowshoe, WV with AT&amp;amp;T signal level. Green - available, red - unavailable.
I have no idea yet how to make the route colorful with orange where the signal is low and green where it is good.
&lt;img src=&quot;/assets/dc-snowshoe-att-signal-level-complete.png&quot; alt=&quot;Complete route from DC to Snowshoe, WV with AT&amp;amp;T signal level&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Part of the route where the service is available.
&lt;img src=&quot;/assets/dc-snowshoe-att-signal-level-available.png&quot; alt=&quot;Route from DC to Snowshoe, WV where AT&amp;amp;T is available&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Part of the route where the service is &lt;strong&gt;not&lt;/strong&gt; available.
&lt;img src=&quot;/assets/dc-snowshoe-att-signal-level-unavailable.png&quot; alt=&quot;Route from DC to Snowshoe, WV without AT&amp;amp;T service&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And also a terrain based part of the map where the AT&amp;amp;T service is interrupted.
&lt;img src=&quot;/assets/dc-snowshoe-att-signal-level-terrain.png&quot; alt=&quot;AT&amp;amp;T service with terrain map as a base&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looks like the rule for the AT&amp;amp;T service is simple. Inside park areas (forests, national and state parks - green on the terrain map) service is absent. Otherwise AT&amp;amp;T gives some coverage.&lt;/p&gt;

&lt;p&gt;I was surprised to find out that the coverage is not actually related to &lt;a href=&quot;https://en.wikipedia.org/wiki/United_States_National_Radio_Quiet_Zone&quot;&gt;the US NRQZ area&lt;/a&gt; or distance to &lt;a href=&quot;https://en.wikipedia.org/wiki/Green_Bank_Telescope&quot;&gt;the Green Bank Radio Observatory&lt;/a&gt;. 
One can get some details about that in the NPR article &lt;a href=&quot;http://www.npr.org/sections/alltechconsidered/2013/10/08/218976699/enter-the-quiet-zone-where-cell-service-wi-fi-are-banned&quot;&gt;Enter The Quiet Zone: Where Cell Service, Wi-Fi Are Banned&lt;/a&gt;
### Next steps
Next time we go to the Snowshoe resort, I’m going to get T-Mobile coverage results and then compare and see if it makes sense to have one or another.&lt;/p&gt;

&lt;h3 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What is wrong with Apple not providing API for cellular service signal strength?&lt;/p&gt;

    &lt;p&gt;I guess it would benefit if Apple would be more open in terms of APIs available.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are interesting ways of getting data through private Apple APIs and from private UIView classes &lt;a href=&quot;stackoverflow.com/questions/754824/get-an-object-properties-list-in-objective-c&quot;&gt;Get an object properties list in Objective-C&lt;/a&gt; and &lt;a href=&quot;https://github.com/valexa/VAFieldTest/blob/master/CoreTelephony.txt&quot;&gt;CoreTelephony.h file&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;These ways will stop your app from being published in the App Store, but for experiments like this are good alternative.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let’s see if Microsoft is more open with cellular&lt;/p&gt;

    &lt;p&gt;Probably, there are different ways to access this data just because MS had different API sets for WP7, WP8, WinRT (WPA81) and Windows 10 UWP. Let’s see who is the winner.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I want to render same data in the Microsoft Power BI. Presumably, this is the kind of tasks to be handled by the Power BI.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/01/05/coding-for-fun-att-signal-strength-dc-to-snowshoe-ios/&amp;amp;text=Coding for fun - AT&amp;amp;T signal levels on route from DC to Snowshoe, WV &amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">We go the Snowshoe ski resort almost every weekend when there is snow.
Driving there takes up to 5 hours.
As long as you drive off the interstate you loose your cell signal.

Last year we had to learn how to drive and communicate in a disconnected world. We now know the route by heart, we know stops, we know which restaurants or gas stations have Wi-Fi. We also got some low-power FRS radios to have more flexibility during our trips.

Honestly, I was always wondering why T-Mobile was so bad in this area. This spring I switched to AT&amp;amp;T to compare the coverage on Outer Banks (where T-Mobile is also failing to get you even basic coverage).
Now it`s winter and it’s time to check out AT&amp;amp;T coverage in our favorite skiing area.

Let’s see how we do that and what we find</summary></entry></feed>
