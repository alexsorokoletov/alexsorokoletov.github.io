<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://0.0.0.0:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2020-11-12T03:14:42+00:00</updated><id>http://0.0.0.0:4000//</id><title type="html">Alex Sorokoletov Notes</title><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><entry><title type="html">Blink HTML - how to make blink HTML these days üòâ</title><link href="http://0.0.0.0:4000/2020/11/11/blink-html-how-to-make-your-html-blink/" rel="alternate" type="text/html" title="Blink HTML - how to make blink HTML these days üòâ" /><published>2020-11-11T00:00:00+00:00</published><updated>2020-11-11T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2020/11/11/blink-html-how-to-make-your-html-blink</id><content type="html" xml:base="http://0.0.0.0:4000/2020/11/11/blink-html-how-to-make-your-html-blink/">&lt;p&gt;The Blink HTML was first visual effect that was available in HTML. Your HTML page could show text, use different colors and blink.
How that happened and how to make blink HTML nowadays (or blink HTML5)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Alright, most of the people I know thing that blink HTML is annoying. It is a part of history now, modern HTML pages use nice CSS3 and JavaScript-based effects to make your HTML page blink and do all other kind of stuff (WebGL, WebXR, 3d, anything).&lt;/p&gt;

&lt;p&gt;Lou Montulli is often credited as a creator of blink HTML tag, and he has an interesting story &lt;a href=&quot;http://www.montulli.org/theoriginofthe%3Cblink%3Etag&quot;&gt;about the origins on blink HTML tag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My favorite quote there is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;and suddenly everything was blinking.    ‚ÄúLook here‚Äù, ‚Äúbuy this‚Äù, ‚Äúcheck this out‚Äù, all blinking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Reminds me &lt;a href=&quot;https://www.youtube.com/watch?v=YlGklt4BSQ8&quot;&gt;Futurama‚Äôs laugh at VR ads&lt;/a&gt;
&lt;span class=&quot;blink&quot;&gt;üòâ&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-make-blink-html-work-nowadays&quot;&gt;How to make blink HTML work nowadays?&lt;/h3&gt;

&lt;p&gt;Enough history!
Good thing about any of the ways below is they support any content, not just text&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink&quot;&gt;MDN recommends a blink HTML polyfill using CSS&lt;/a&gt; which uses keyframes and will make blink HTML tag blink again.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;blink {
  animation: 2s linear infinite condemned_blink_effect;
}

@keyframes condemned_blink_effect {
  0% { visibility: hidden; }
  50% { visibility: hidden; }
  100% { visibility: visible; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Wikipedia‚Äôs way to make blink HTML work again:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;blink, .blink {
  animation: blink 1s step-end infinite;
}

@keyframes blink {
  67% { opacity: 0 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;JavaScript way to make a blinking HTML element (not only text)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const blink = document.getElementById('blink');
setInterval(() =&amp;gt; {
    blink.style.opacity = (blink.style.opacity === 0 ? 1 : 0);
}, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;obsolete-blink-html-ways&quot;&gt;Obsolete blink HTML ways&lt;/h3&gt;

&lt;p&gt;What blink HTML ways do not work:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&amp;lt;blink&amp;gt; HTML tag itself&lt;/li&gt;
  &lt;li&gt;CSS style &lt;code class=&quot;highlighter-rouge&quot;&gt;text-decoration: blink;&lt;/code&gt; - does not make your HTML blink&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;P.S.: Anybody remembers marquee? :D&lt;/p&gt;

&lt;style&gt;

.blink {
  animation: 2s linear infinite condemned_blink_effect;
}


@keyframes condemned_blink_effect {
  0% { visibility: hidden; }
  50% { visibility: hidden; }
  100% { visibility: visible; }
}
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2020/11/11/blink-html-how-to-make-your-html-blink/&amp;amp;text=Blink+HTML+-+how+to+make+blink+HTML+these+days+%F0%9F%98%89%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">The Blink HTML was first visual effect that was available in HTML. Your HTML page could show text, use different colors and blink.
How that happened and how to make blink HTML nowadays (or blink HTML5)</summary></entry><entry><title type="html">C# Analyzers and Xamarin (Visual Studio for Mac)</title><link href="http://0.0.0.0:4000/2019/01/31/roslyn-analyzers-visual-studio-mac-xamarin/" rel="alternate" type="text/html" title="C# Analyzers and Xamarin (Visual Studio for Mac)" /><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2019/01/31/roslyn-analyzers-visual-studio-mac-xamarin</id><content type="html" xml:base="http://0.0.0.0:4000/2019/01/31/roslyn-analyzers-visual-studio-mac-xamarin/">&lt;p&gt;The news of having C# compiler written in C# were crazy at first. Then everyone realized the power that comes with it.
One of the great features that came with Roslyn compiler was support for analyzers.&lt;/p&gt;

&lt;p&gt;Analyzers are like a plugins for C# compilers. Easy to write and thus really flexible to adjust to your specific situation.&lt;/p&gt;

&lt;p&gt;It‚Äôs a powerful addition and there are hundreds of &lt;em&gt;GREAT&lt;/em&gt; analyzers on GitHub already.&lt;/p&gt;

&lt;p&gt;How do we use that greatness with Xamarin apps?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Visual Studio for Mac is still a main tool for anyone working with Xamarin and iOS and Android apps.
While we have Roslyn-based compiler there and .NET Core and .NET Standard support, analyzers are not yet first-class citizen&lt;/p&gt;

&lt;h3 id=&quot;so-what-do-we-do&quot;&gt;So what do we do?&lt;/h3&gt;
&lt;p&gt;We need to do some manual actions to add analyzers to your Xamarin project.
I‚Äôll guide you through&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Download analyzers that you want to use and place it in the folder at the solution level. Say, &lt;code class=&quot;highlighter-rouge&quot;&gt;Analyzers&lt;/code&gt;.
 Look for any dependencies that these analyzers require.&lt;/p&gt;

    &lt;p&gt;VS4Mac does not download analyzers automatically if you add Nuget package with an analyzer and there is also an issue to get together all dependencies.&lt;/p&gt;

    &lt;p&gt;So we do it ourselves.
 Here I downloaded &lt;a href=&quot;https://github.com/Microsoft/vs-threading&quot;&gt;VS Threading analyzers&lt;/a&gt; since they provide warnings for &lt;code class=&quot;highlighter-rouge&quot;&gt;async void&lt;/code&gt; methods and lambdas.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/analyzers-download-manually.png&quot; alt=&quot;Do it yourself - get analyzers and dependencies together&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open your project file &lt;code class=&quot;highlighter-rouge&quot;&gt;App.Core.csproj&lt;/code&gt; and include your analyzer. Here is an example:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;Analyzer Include=&quot;..\Analyzers\Microsoft.VisualStudio.Threading.Analyzers.dll&quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reload the project and enjoy&lt;/p&gt;

    &lt;p&gt;These simple steps work for .NET Standard libraries and for Xamarin.Android projects. Xamarin.iOS projects seems to ignore &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Analyzer&amp;gt;&lt;/code&gt; tag altogether.&lt;/p&gt;

    &lt;p&gt;If you miss something from the dependencies, build log will have few warnings (not compilation warnings) saying the analyzer can‚Äôt be loaded.
Watch for these during setup!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Optional&lt;/em&gt; - setup some of the warnings analyzers produce as errors.&lt;/p&gt;

    &lt;p&gt;This is a nice addition you can have. While analyzers usually produce warnings, you can force them to be errors.
 For example, I really try to stick to the golden rule &lt;code class=&quot;highlighter-rouge&quot;&gt;avoid async void&lt;/code&gt;.
 So, the threading analyzer would produce a warning with the code &lt;a href=&quot;https://github.com/Microsoft/vs-threading/blob/master/doc/analyzers/VSTHRD100.md&quot;&gt;VSTHRD100&lt;/a&gt;.
 I‚Äôd like to make that a compilation error instead.&lt;/p&gt;

    &lt;p&gt;It‚Äôs as simple as step 2 - open the project file and add a line:
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
     &amp;lt;WarningsAsErrors&amp;gt;VSTHRD100;VSTHRD101;&amp;lt;/WarningsAsErrors&amp;gt;
&lt;/code&gt;
 The example also includes &lt;a href=&quot;https://github.com/Microsoft/vs-threading/blob/master/doc/analyzers/VSTHRD101.md&quot;&gt;VSTHRD101&lt;/a&gt; which is even more tricky - async void lambdas are hard to spot and easy to come by these days.&lt;/p&gt;

    &lt;p&gt;If you want to ignore some warnigns (an analyzer can be noise, can‚Äôt it?), here is another line to add to the project:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
     &amp;lt;NoWarn&amp;gt;VSTHRD200&amp;lt;/NoWarn&amp;gt;
&lt;/code&gt;
 This one says do not warn me about making all async methods end with &lt;code class=&quot;highlighter-rouge&quot;&gt;Async&lt;/code&gt; &lt;a href=&quot;https://github.com/Microsoft/vs-threading/blob/master/doc/analyzers/VSTHRD200.md&quot;&gt;VSTHRD200&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;any-good-analyzers-you-know&quot;&gt;Any good analyzers you know?&lt;/h3&gt;

&lt;p&gt;My goal was to make sure there is an automatic safeguard against &lt;code class=&quot;highlighter-rouge&quot;&gt;async void&lt;/code&gt; methods, anonymous or no. 
Thanks to Roslyn analyzers one can have it on 2 of 3 projects in a typical iOS/Android crossplat app.&lt;/p&gt;

&lt;p&gt;Here are some good ones I‚Äôve came through:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DotNetAnalyzers&quot;&gt;DotNetAnalyzers&lt;/a&gt; - the most known collection of analyzers&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/vs-threading/&quot;&gt;Microsoft/vs-threading/&lt;/a&gt; - great help with async void and overall async/await usage&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ironcev/awesome-roslyn&quot;&gt;ironcev/awesome-roslyn&lt;/a&gt; - more like an overview of analyzers you can get&lt;/p&gt;

&lt;p&gt;Let me know which rules you specifically use in your projects, I‚Äôd be glad to try them as well and share with my readers.&lt;/p&gt;

&lt;h3 id=&quot;visual-studio-not-for-mac&quot;&gt;Visual Studio (not for Mac)&lt;/h3&gt;
&lt;p&gt;VS 2017 supports analyzers just fine, allowing you to install them from Nuget packages.
To be honest, I‚Äôm not sure why the Mac version does not support them yet.&lt;/p&gt;

&lt;p&gt;It‚Äôs a great technology basically wasted on Xamarin side.&lt;/p&gt;

&lt;h3 id=&quot;hidden-candy&quot;&gt;Hidden candy&lt;/h3&gt;

&lt;p&gt;Nice thing about these analyzers - AppCenter.ms respects them. So if you follow steps 1 to 4, your builds in pull requests or branches will fail once someone uses &lt;code class=&quot;highlighter-rouge&quot;&gt;async void&lt;/code&gt;. I like that.&lt;/p&gt;

&lt;p&gt;That‚Äôs it for today, thank you for reading!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2019/01/31/roslyn-analyzers-visual-studio-mac-xamarin/&amp;amp;text=C%23+Analyzers+and+Xamarin+%28Visual+Studio+for+Mac%29%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">The news of having C# compiler written in C# were crazy at first. Then everyone realized the power that comes with it.
One of the great features that came with Roslyn compiler was support for analyzers.

Analyzers are like a plugins for C# compilers. Easy to write and thus really flexible to adjust to your specific situation.

It‚Äôs a powerful addition and there are hundreds of GREAT analyzers on GitHub already.

How do we use that greatness with Xamarin apps?</summary></entry><entry><title type="html">Why Reply All is an essential skill</title><link href="http://0.0.0.0:4000/2018/09/20/reply-all/" rel="alternate" type="text/html" title="Why Reply All is an essential skill" /><published>2018-09-20T00:00:00+00:00</published><updated>2018-09-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2018/09/20/reply-all</id><content type="html" xml:base="http://0.0.0.0:4000/2018/09/20/reply-all/">&lt;p&gt;One of the practices that I find essential for any member of any team is to use Reply All feature in the email communication. Why is that?&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;First of all, there are hundreds of different views about Reply All feature. To summarize 99% of them, let‚Äôs just agree Reply All should be used in some cases but not others.
Here is my take on how that applies to a team.&lt;/p&gt;

&lt;h3 id=&quot;some-background&quot;&gt;Some background&lt;/h3&gt;
&lt;p&gt;As some of you know, I like remote work.
Mainly because of 192 million benefits :)
&lt;img src=&quot;/assets/remoteworkbenefits.png&quot; alt=&quot;Remote work has a lot of benefits&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Working remotely teaches how to work in a team. Working in an office not always means working in a team, sometimes it is just working around other people.
Once you are remote for any of the reasons, it is so hard to be in the loop unless there are some practices in the team to prevent this disconnect.
Today I would like to share my points about Reply All.&lt;/p&gt;

&lt;h3 id=&quot;simple-rules&quot;&gt;Simple rules&lt;/h3&gt;
&lt;p&gt;Reply All is there for a reason. You have to think whether reply or reply all. Yes. Think :) 
And I am going to make it easy for you. 
Here is my gift.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/replyall.png&quot; alt=&quot;Reply All decision maker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3 of 4 branches lead to Reply All. Only 1 of 4 needs Reply.
Now, let me give you a few examples.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Your PM sends an email with an issue from your client to you and the rest of the team asking to create a task and investigate. Email has you, team members and a PM as a sender.
All of these are interested in your response. Reply All. No brainer&lt;/li&gt;
  &lt;li&gt;Someone from the team leaves the company and sends farewell email to your team and whole company. You would like to wish him/her well. 
Private response. Reply. No brainer&lt;/li&gt;
  &lt;li&gt;You report a bug to another team1 and include their PM, team1 alias. Turns out, the team responsible for this issue is another one. PM of team1 fixes that by adding PM2 and team2 aliases and asking them to help you. Someone from team2 asks for an additional info.
Your response is only interesting now for PM2 and team2. Hit Reply All and edit recipients to remove PM1 and team1. No brainer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With a bit of practice it will be a natural skill.&lt;/p&gt;

&lt;p&gt;Where is that button?
Good question. All mail apps, even on your phone, have it. Google and find it. Here is what you can do specifically for Gmail.&lt;/p&gt;

&lt;h5 id=&quot;how-to-make-reply-all-your-default-response-in-gmail&quot;&gt;How To Make Reply All Your Default Response in Gmail&lt;/h5&gt;
&lt;p&gt;Go to Gmail settings -&amp;gt; General tab -&amp;gt; Default reply behavior. Set it to Reply all. Enjoy. It is &lt;em&gt;that&lt;/em&gt; easy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gmail-reply-all.png&quot; alt=&quot;Enable Reply All in Google Mail GMail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs it for today, thank you!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2018/09/20/reply-all/&amp;amp;text=Why+Reply+All+is+an+essential+skill%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">One of the practices that I find essential for any member of any team is to use Reply All feature in the email communication. Why is that?</summary></entry><entry><title type="html">My favorite extensions for Visual Studio for Mac</title><link href="http://0.0.0.0:4000/2018/09/20/favorite-extensions-visual-studio-mac-xamarin/" rel="alternate" type="text/html" title="My favorite extensions for Visual Studio for Mac" /><published>2018-09-20T00:00:00+00:00</published><updated>2018-09-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2018/09/20/favorite-extensions-visual-studio-mac-xamarin</id><content type="html" xml:base="http://0.0.0.0:4000/2018/09/20/favorite-extensions-visual-studio-mac-xamarin/">&lt;p&gt;5 extensions to transform Visual Studio for Mac to even more powerful IDE. 
Each of them, when discovered (or developed), allowed me to save my time and simplify my workflow.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;nuget-package-management&quot;&gt;1. NuGet Package Management&lt;/h3&gt;
&lt;p&gt;This one I found out quite recently. If you ever used VS 2017, you know that it has much nicer and comfortable UI to manage NuGet packagets.
You can install and update multiple selected packages at once.&lt;/p&gt;

&lt;p&gt;I found it very useful, especially when installing next MvvmCross update and keeping all other packages unchanged.&lt;/p&gt;

&lt;p&gt;VS4Mac team, you should have that built in!
Thanks to @brent.l for the tip.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mrward/monodevelop-nuget-extensions&quot;&gt;Download NuGet Package Management extensions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href=&quot;https://github.com/mrward/monodevelop-addins&quot;&gt;https://github.com/mrward/monodevelop-addins&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;defaultdesigner&quot;&gt;2. DefaultDesigner&lt;/h3&gt;
&lt;p&gt;This is a Xamarin Studio &amp;amp; Visual Studio for Mac add-in to open .xib and .storyboard files with Xcode Interface Builder by default.
By double clicking it.&lt;/p&gt;

&lt;p&gt;Awesome timesaver. Since I edit all storyboards in XCode only, this is a must for me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/colbylwilliams/DefaultDesigner&quot;&gt;Download DefaultDesigner for Visual Studio for Mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href=&quot;https://github.com/colbylwilliams/DefaultDesigner&quot;&gt;https://github.com/colbylwilliams/DefaultDesigner&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;mfractor&quot;&gt;3. MFractor&lt;/h3&gt;
&lt;p&gt;Kudos to Matthew for this amazing mega-extension (comes in two flavors, lite and pro).
I can‚Äôt even start to describe what you can do with it, instead go and check the website https://www.mfractor.com/&lt;/p&gt;

&lt;p&gt;Some of the features I like:
- XAML helpers essential for any Xamarin.Forms developer
- Android Resource intellinsense and help with navigation and replace with resource lookup
- Point out missing constructors for Xamarin.Android views/classes
- many other things I have not learned yet&lt;/p&gt;

&lt;p&gt;MFactor Pro: &lt;a href=&quot;https://www.mfractor.com/pages/download&quot;&gt;https://www.mfractor.com/products/mfractor-for-visual-studio-mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MFractor Lite: &lt;a href=&quot;https://www.mfractor.com/pages/download&quot;&gt;https://www.mfractor.com/pages/download&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sortandremoveusings&quot;&gt;4. SortAndRemoveUsings&lt;/h3&gt;
&lt;p&gt;Disclaimer: this is my own extension. It helps me by automatically sort and remove usings when you save a C# file.
Extending VS4Mac was moderately easy, and I do that action anyway before commit since I like to keep my code clean.&lt;/p&gt;

&lt;p&gt;No magic involved regarding usings here, instead of going through context menu this add-in does that on file save.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/alexsorokoletov/VisualStudioMac.SortRemoveUsings/raw/master/Meta/xamarin-save-sort.gif?raw=true&quot; alt=&quot;Screenshot of VS4Mac extension to sort/remove C# usings automatically&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alexsorokoletov/VisualStudioMac.SortRemoveUsings/releases/tag/1.1&quot;&gt;Download SortAndRemoveUsings for Visual Studio for Mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href=&quot;https://github.com/alexsorokoletov/VisualStudioMac.SortRemoveUsings&quot;&gt;https://github.com/alexsorokoletov/VisualStudioMac.SortRemoveUsings&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;solutionname&quot;&gt;5. SolutionName&lt;/h3&gt;
&lt;p&gt;Disclaimer: this is my own extension. This extension helps me easily determine which solution is open right now if I have several Visual Studio instances open. In a way, this is a cheap replacement for Windows 10 task switcher which shows icon and solution name when switching between VS 2017 instances.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/DreamTeamMobile/VS4Mac.SolutionName/raw/master/Meta/screenshot.png?raw=true&quot; alt=&quot;Screenshot of VS4Mac extension to show solution name&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DreamTeamMobile/VS4Mac.SolutionName/releases&quot;&gt;Download VS4Mac.SolutionName for Visual Studio for Mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href=&quot;https://github.com/DreamTeamMobile/VS4Mac.SolutionName&quot;&gt;https://github.com/DreamTeamMobile/VS4Mac.SolutionName&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;your-recommendations&quot;&gt;Your recommendations?&lt;/h3&gt;

&lt;p&gt;Which extensions do you use? Let me know in the comments!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2018/09/20/favorite-extensions-visual-studio-mac-xamarin/&amp;amp;text=My+favorite+extensions+for+Visual+Studio+for+Mac%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">5 extensions to transform Visual Studio for Mac to even more powerful IDE. 
Each of them, when discovered (or developed), allowed me to save my time and simplify my workflow.</summary></entry><entry><title type="html">Easy way to create Xamarin.iOS binding from CocoaPods</title><link href="http://0.0.0.0:4000/2017/02/05/objc-automatic-easy-way-to-create-xamarin-bindings-ios/" rel="alternate" type="text/html" title="Easy way to create Xamarin.iOS binding from CocoaPods" /><published>2017-02-05T00:00:00+00:00</published><updated>2017-02-05T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2017/02/05/objc-automatic-easy-way-to-create-xamarin-bindings-ios</id><content type="html" xml:base="http://0.0.0.0:4000/2017/02/05/objc-automatic-easy-way-to-create-xamarin-bindings-ios/">&lt;p&gt;Hey, Xamarin developers!
Developing iOS apps quite often includes using native libraries and Xamarin for iOS supports this by creating bindings.
This was 100% manual process until &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt;. After, &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt; began supporting &lt;code class=&quot;highlighter-rouge&quot;&gt;CocoaPods&lt;/code&gt; (it is NuGet for iOS developers, so everything is in there). 
However, it doesn‚Äôt work in many cases (it can‚Äôt build something or reflect ObjectiveC code correctly).&lt;/p&gt;

&lt;p&gt;Also, &lt;code class=&quot;highlighter-rouge&quot;&gt;sharpie&lt;/code&gt; doesn‚Äôt support dependencies within pods. This is where the new &lt;a href=&quot;https://github.com/alexsorokoletov/objc-automatic&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt;&lt;/a&gt; started.&lt;/p&gt;

&lt;p&gt;But first, let me show you a demo how easy it is to create Xamarin.iOS binding for cocoapod.
&lt;!--more--&gt;&lt;/p&gt;
&lt;iframe width=&quot;630&quot; height=&quot;394&quot; src=&quot;https://www.useloom.com/embed/e17d23d0ec3711e689c9c95ad27ead9a&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;prelude&quot;&gt;Prelude&lt;/h3&gt;

&lt;p&gt;Imagine you have to use &lt;a href=&quot;https://cocoapods.org/pods/FirebaseAnalytics&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt;&lt;/a&gt; in your Xamarin app (Now, there is a NuGet for that, but let‚Äôs rewind to the point where there wasn‚Äôt one).
You would go ahead and create binding for that library, right. Unfortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt; is what I call an umbrella pod. It has no code, just dependencies.&lt;/p&gt;

&lt;p&gt;So, instead, you need to go and create bindings for pods like: &lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseCore&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseInstanceID&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleInterchangeUtilities&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleSymbolUtilities&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleToolboxForMac/NSData+zlib&lt;/code&gt;.
Literally, out of nowhere amount of work exploded. Now you need 5 bindings instead of just one. ObjectiveSharpie won‚Äôt help us with that.&lt;/p&gt;

&lt;p&gt;Interesting, &lt;a href=&quot;https://cocoapods.org/pods/FirebaseCore&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FirebaseCore&lt;/code&gt;&lt;/a&gt; also has dependencies. 
So, you need to create 5 Xamarin.iOS binding projects, do the code, reference them correspondingly and then you will have a binding for &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Few questions arise: 
- How do you distribute that?
    Single binary? 
    Many binaries?
    NuGet package or packages?
- How do you version that?
    1.0.0 is not an option, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt; is updated often.
    Oh, yes. Each of these pods has it‚Äôs own version.&lt;/p&gt;

&lt;p&gt;If you choose NuGet packages, then you also need to reference packages same way as pods and Xamarin.iOS projects.&lt;/p&gt;

&lt;p&gt;Frankly, I tried to do that manually. After &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Core&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Firebase/Analytics&lt;/code&gt; I understood this is hard.
I couldn‚Äôt imagine I will do that again when version 3.7.x of Firebase is released. Not mentioning sometimes you have to redo bindings to fix incorrect signature or binary&lt;/p&gt;

&lt;h3 id=&quot;automate-all-the-things&quot;&gt;Automate all the things.&lt;/h3&gt;

&lt;p&gt;We‚Äôve been using F# FAKE for Xamarin iOS/Android builds for a long time and I love it.
I decided to try F# FAKE with this problem as well.&lt;/p&gt;

&lt;p&gt;First, the tool generates correct tree of dependencies.
Downloads all metadata about pods. Versions, frameworks, linker flags, dependencies, etc.&lt;/p&gt;

&lt;p&gt;Then, for each of the pods it create a subfolder inside &lt;code class=&quot;highlighter-rouge&quot;&gt;bindings&lt;/code&gt; and puts there Xamarin.iOS binding project with C# API surface generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;sharpie&lt;/code&gt;.
It adds all linker flags, puts the iOS binary in there, adjusts the references to the dependencies (other Xamarin.iOS binding projects).&lt;/p&gt;

&lt;p&gt;Now, you can build these Xamarin.iOS bindings using Xamarin Studio.&lt;/p&gt;

&lt;p&gt;Turns out, it takes quite a time for XS, so the tool also creates &lt;code class=&quot;highlighter-rouge&quot;&gt;podname.build.sh&lt;/code&gt; script to go ahead and &lt;code class=&quot;highlighter-rouge&quot;&gt;MSBuild&lt;/code&gt; all the projects in correct order.&lt;/p&gt;

&lt;p&gt;So the flow would be: run the script, see the errors, fix the errors, run it again (you can probably put it on ‚Äìwatch do run continously).&lt;/p&gt;

&lt;p&gt;Now you have the .dll files with bindings. (pss, there is also a linker side of that story, take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;Linker.cs&lt;/code&gt; files)&lt;/p&gt;

&lt;h3 id=&quot;demo-time&quot;&gt;Demo time!&lt;/h3&gt;
&lt;p&gt;Here are few videos showing how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt; and how it works internally.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.useloom.com/share/7679bec0ec3911e6b8fde34d395e0c71&quot;&gt;Binding Firebase/Analytics using objc-automatic&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;630&quot; height=&quot;394&quot; src=&quot;https://www.useloom.com/embed/7679bec0ec3911e6b8fde34d395e0c71&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://www.useloom.com/share/f756df30ec3b11e6b8fde34d395e0c71&quot;&gt;How objc-automatic works&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;630&quot; height=&quot;394&quot; src=&quot;https://www.useloom.com/embed/f756df30ec3b11e6b8fde34d395e0c71&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;nuget-side-of-things&quot;&gt;NuGet side of things&lt;/h3&gt;
&lt;p&gt;For the NuGet distribution, you want to have same tree of packages with same versioning.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt; tool does that for you. Along with projects, it generates &lt;code class=&quot;highlighter-rouge&quot;&gt;packages.config&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.nuspec&lt;/code&gt; files for each of the CocoaPods.
It also enhances &lt;code class=&quot;highlighter-rouge&quot;&gt;podname.build.sh&lt;/code&gt; script to build packages and restore packages in correct order when building Xamarin.iOS binding projects.
For this goal tool creates local temporary NuGet feed and publishes built packages and restores dependencies from this source.&lt;/p&gt;

&lt;p&gt;You want to be sure people can later restore our packages and have everything working (at least - compiling).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.nuspec&lt;/code&gt; files will contain versions, metadata, everything needed.&lt;/p&gt;

&lt;h3 id=&quot;does-it-work&quot;&gt;Does it work?&lt;/h3&gt;
&lt;p&gt;It worked for quite many cocoapods I used to test it with. More importantly, it worked with Firebase pods. 
For the &lt;code class=&quot;highlighter-rouge&quot;&gt;lottie-ios&lt;/code&gt; it took around 1 minute to generate the &lt;code class=&quot;highlighter-rouge&quot;&gt;bindings&lt;/code&gt; infrastructure (projects, NuGet package specs).
Around 1 more minute to run &lt;code class=&quot;highlighter-rouge&quot;&gt;lottie-ios.build.sh&lt;/code&gt; and have NuGet package ready for publishing.&lt;/p&gt;

&lt;p&gt;I‚Äôm not trying to brag here, just saying that basically compiling lottie manually and launching Xamarin Studio would take around that time.
In first place, the &lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt; tool aims for complex pod bindings with dependencies.&lt;/p&gt;

&lt;p&gt;One binding sometimes is really hard to crack. Having 6 of them is even harder.&lt;/p&gt;

&lt;h4 id=&quot;dicsoveries&quot;&gt;Dicsoveries&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Turns out, &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt; can‚Äôt bind all the cocoapods.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt; doesn‚Äôt bind correctly some of the classes from iOS frameworks (misses casign of the managed class name)&lt;/li&gt;
  &lt;li&gt;Sometimes you need to direct &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectiveSharpie&lt;/code&gt; into correct set of header files, otherwise it skips some classes. C# API surface shows less than it should&lt;/li&gt;
  &lt;li&gt;Xamarin.iOS linker doesn‚Äôt understand that Xamarin.iOS app might be using a binding that might be using another binding. The latter one gets lost durign compilation process.&lt;/li&gt;
  &lt;li&gt;Xamarin.iOS binding projects are actually very smart with &lt;code class=&quot;highlighter-rouge&quot;&gt;.framework&lt;/code&gt;s.&lt;/li&gt;
  &lt;li&gt;You can test complex NuGet package dependency scenario locally using local NuGet source&lt;/li&gt;
  &lt;li&gt;You can create Xamarin.iOS binding with just Terminal and VS Code. Nice.&lt;/li&gt;
  &lt;li&gt;It is so hard to debug F# FAKE scripts (ionide-fake VSCode extension doesn‚Äôt help)&lt;/li&gt;
  &lt;li&gt;CocoaPods spec can be a mess. Definitely moving forward I need to restructure this piece.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexsorokoletov/objc-automatic&quot;&gt;Source code on GitHub: objc-automatic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/cross-platform/macios/binding/objective-sharpie/&quot;&gt;ObjectiveSharpie from Xamarin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/cross-platform/macios/binding/&quot;&gt;Xamarin Documentation - Binding Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;This tool works as it is. There are still things to improve and fix (ZendeskSDK and AWSCognito pods are examples).
Not all metadata flows from pod to NuGet package.
Tool is opensourced and everyone is welcome to use it and improve it.&lt;/p&gt;

&lt;h4 id=&quot;thank-you&quot;&gt;Thank you&lt;/h4&gt;
&lt;p&gt;Big thanks to Xamarin Team (Miguel and Bill) who helped taming Xamarin.iOS linker.
Thanks for F# FAKE team, this is a great tool to start with.&lt;/p&gt;

&lt;p&gt;And thank you for your interest and feedback. 
I appreciate any positive or negative feedback about &lt;code class=&quot;highlighter-rouge&quot;&gt;objc-automatic&lt;/code&gt; and value any success or failure story using this tool.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2017/02/05/objc-automatic-easy-way-to-create-xamarin-bindings-ios/&amp;amp;text=Easy+way+to+create+Xamarin.iOS+binding+from+CocoaPods%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Hey, Xamarin developers!
Developing iOS apps quite often includes using native libraries and Xamarin for iOS supports this by creating bindings.
This was 100% manual process until ObjectiveSharpie. After, ObjectiveSharpie began supporting CocoaPods (it is NuGet for iOS developers, so everything is in there). 
However, it doesn‚Äôt work in many cases (it can‚Äôt build something or reflect ObjectiveC code correctly).

Also, sharpie doesn‚Äôt support dependencies within pods. This is where the new objc-automatic started.

But first, let me show you a demo how easy it is to create Xamarin.iOS binding for cocoapod.</summary></entry><entry><title type="html">Android Maps Utils for Xamarin updated with new features and NuGet</title><link href="http://0.0.0.0:4000/2016/12/12/android-maps-utils-updated-published-nuget/" rel="alternate" type="text/html" title="Android Maps Utils for Xamarin updated with new features and NuGet" /><published>2016-12-12T00:00:00+00:00</published><updated>2016-12-12T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2016/12/12/android-maps-utils-updated-published-nuget</id><content type="html" xml:base="http://0.0.0.0:4000/2016/12/12/android-maps-utils-updated-published-nuget/">&lt;p&gt;I‚Äôve updated Xamarin Android Maps Utils recently and now one can get this as a &lt;a href=&quot;https://www.nuget.org/packages/Xamarin.Android.Maps.Utils&quot;&gt;NuGet package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Install-Package Xamarin.Android.Maps.Utils -Pre&lt;/code&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Currently project has dependency on the latest and greatest Google Play Services package from Xamarin (32.961.0) and requires ‚ÄúTargetFramework‚Äù 7.0 (which should be by default for all new projects anyway).
Besides NuGet, project has now latest (0.4.4) java code inside bringing more new features for users.&lt;/p&gt;

&lt;p&gt;Now you get (shameless plug from original repo):&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Marker clustering ‚Äî handles the display of a large number of points&lt;/p&gt;

  &lt;p&gt;Heat maps ‚Äî display a large number of points as a heat map&lt;/p&gt;

  &lt;p&gt;IconGenerator ‚Äî display text on your Markers&lt;/p&gt;

  &lt;p&gt;Poly decoding and encoding ‚Äî compact encoding for paths, interoperability with Maps API web services&lt;/p&gt;

  &lt;p&gt;Spherical geometry ‚Äî for example: computeDistance, computeHeading, computeArea&lt;/p&gt;

  &lt;p&gt;KML ‚Äî displays KML data&lt;/p&gt;

  &lt;p&gt;GeoJSON ‚Äî displays and styles GeoJSON data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/googlemaps/android-maps-utils&quot;&gt;Google‚Äôs Github has a nice GIF demo of what Android Maps Utils can do now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, I was not getting any notifications about activities on this project on Github, now it‚Äôs fixed. Thank you for the feedback and pull requests!&lt;/p&gt;

&lt;p&gt;Keep it coming!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xamarin/GooglePlayServicesComponents#versioning&quot;&gt;Versioning of Xamarin.GooglePlayServices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexsorokoletov/Xamarin.Android.Maps.Utils&quot;&gt;Xamarin.Android.Maps.Utils on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2016/12/12/android-maps-utils-updated-published-nuget/&amp;amp;text=Android+Maps+Utils+for+Xamarin+updated+with+new+features+and+NuGet%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">I‚Äôve updated Xamarin Android Maps Utils recently and now one can get this as a NuGet package.

Install-Package Xamarin.Android.Maps.Utils -Pre</summary></entry><entry><title type="html">Easiest way to migrate from Xamarin.Insights to HockeyApp</title><link href="http://0.0.0.0:4000/2016/12/11/migrating-from-xamarin-insights-to-hockeyapp-sdk/" rel="alternate" type="text/html" title="Easiest way to migrate from Xamarin.Insights to HockeyApp" /><published>2016-12-11T00:00:00+00:00</published><updated>2016-12-11T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2016/12/11/migrating-from-xamarin-insights-to-hockeyapp-sdk</id><content type="html" xml:base="http://0.0.0.0:4000/2016/12/11/migrating-from-xamarin-insights-to-hockeyapp-sdk/">&lt;p&gt;Xamarin.Insights was and still is a great exception tracking system for Xamarin applications. However&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚Ä¶ Do also note that Xamarin Insights is now considered to be end of life: since the acquisition by Microsoft, Insights has been deprecated in favour of HockeyApp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many of us have apps integrated with Xamarin.Insights. Now it‚Äôs time to ditch Xamarin.Insights and put HockeyApp SDK instead.
HockeyApp has different integration points and API and some of the features from Insights are missing.&lt;/p&gt;

&lt;p&gt;What would be the easiest way to migrate from Xamarin Insights to HockeyApp?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;meet-dtinsightstohockey&quot;&gt;Meet DT.InsightsToHockey&lt;/h3&gt;
&lt;p&gt;With this new project and NuGet package, all you have to do is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to remove Xamarin.Insights package and reference&lt;/li&gt;
  &lt;li&gt;and  install DT.InsightsToHockey package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, update the API key (change Insights‚Äô one to HockeyApp app id) and you good to go.&lt;/p&gt;

&lt;p&gt;Quite simple, right?&lt;/p&gt;

&lt;p&gt;Here is how it looks in the project:&lt;/p&gt;

&lt;p&gt;Before:
&lt;img src=&quot;/assets/insights_to_hockeyapp_before.png&quot; alt=&quot;Xamarin Insights package in references before&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After:
&lt;img src=&quot;/assets/insights_to_hockeyapp_after.png&quot; alt=&quot;DT.InsightsToHockey package in references after&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Events already coming to HockeyApp after the changes:
&lt;img src=&quot;/assets/insights_to_hockeyapp_events.png&quot; alt=&quot;Events coming to HockeyApp after change&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works?&lt;/h3&gt;
&lt;p&gt;Under the hood, package exposes exactly same API under same namespace, reporting and integrating with HockeyApp instead.&lt;/p&gt;

&lt;p&gt;Literally, you have to change no code, just references.
Project supports PCL and iOS as of now, Android is in progress. I‚Äôve tried to match all features available in Insights to HockeyApp SDK features. HockeyApp team was very helpful providing some feedback on features parity.&lt;/p&gt;

&lt;p&gt;I will be glad to receive any feedback and help with this project (Android and UWP are waiting!)&lt;/p&gt;

&lt;h4 id=&quot;additional-information&quot;&gt;Additional information&lt;/h4&gt;
&lt;p&gt;I recommended to take a look at features and limitations of HockeyApp SDK for each specific platform.&lt;/p&gt;

&lt;p&gt;HockeyApp is powerful and well-know metrics and crash tracking system. 
You can do in-app updates for iOS/Android, password-protected screens in the app (very well suited for diagnostics/admin screens). You can integrate a feedback page as well.&lt;/p&gt;

&lt;p&gt;This fall Azure integrated HockeyApp with Azure. Data coming to HockeyApp can be available in App Insights for analysis and intelligence.
It is very powerful way to see and analyze events coming from your app. &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/access-hockeyapp-data-in-ai-with-hockeyapp-bridge-app/&quot;&gt;Step by step guidance from AppInsights team.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading. Please let me know your thoughts on the subject.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexsorokoletov/DT.XamarinInsightsToHockeyApp&quot;&gt;DT.InsightsToHockey on Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitstadium/HockeySDK-Xamarin&quot;&gt;HockeyApp SDK for Xamarin&lt;/a&gt; and for &lt;a href=&quot;https://github.com/bitstadium/HockeySDK-iOS&quot;&gt;iOS&lt;/a&gt; and &lt;a href=&quot;https://github.com/bitstadium/HockeySDK-Android&quot;&gt;Android&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/insights/&quot;&gt;Xamarin.Insights Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xamarin.com/faq#qha1&quot;&gt;What is happening with Xamarin.Insights&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/access-hockeyapp-data-in-ai-with-hockeyapp-bridge-app/&quot;&gt;Exploring HockeyApp data in Application Insights: introducing the Bridge App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hockeyapp.net/blog/2016/08/30/custom-events-public-preview.html&quot;&gt;Custom events for everybody&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2016/12/11/migrating-from-xamarin-insights-to-hockeyapp-sdk/&amp;amp;text=Easiest+way+to+migrate+from+Xamarin.Insights+to+HockeyApp%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Xamarin.Insights was and still is a great exception tracking system for Xamarin applications. However


  ‚Ä¶ Do also note that Xamarin Insights is now considered to be end of life: since the acquisition by Microsoft, Insights has been deprecated in favour of HockeyApp.


Many of us have apps integrated with Xamarin.Insights. Now it‚Äôs time to ditch Xamarin.Insights and put HockeyApp SDK instead.
HockeyApp has different integration points and API and some of the features from Insights are missing.

What would be the easiest way to migrate from Xamarin Insights to HockeyApp?</summary></entry><entry><title type="html">Named parameters in Func&amp;lt;T&amp;gt;/Action&amp;lt;T&amp;gt; type in C#?</title><link href="http://0.0.0.0:4000/2016/11/29/naming-func-action-of-t-arguments/" rel="alternate" type="text/html" title="Named parameters in Func&amp;lt;T&amp;gt;/Action&amp;lt;T&amp;gt; type in C#?" /><published>2016-11-29T00:00:00+00:00</published><updated>2016-11-29T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2016/11/29/naming-func-action-of-t-arguments</id><content type="html" xml:base="http://0.0.0.0:4000/2016/11/29/naming-func-action-of-t-arguments/">&lt;p&gt;If you ever wondered, why Visual Studio (and Visual Studio for Mac) suggest you to name your lambda arguments with names like arg1, arg2 ‚Ä¶ argN and so on‚Ä¶&lt;/p&gt;

&lt;p&gt;Here is a common situation where somewhere in your library or helper class you have a method taking in &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&amp;lt;T&amp;gt;&lt;/code&gt;.
&lt;img src=&quot;/assets/naming_func_of_t_declaration.png&quot; alt=&quot;Definition of your method using Func/Action classes&quot; /&gt;
and then when you want to use this method VS suggests you following names: arg1 and arg2.
Like there is nothing better than that :)
&lt;img src=&quot;/assets/naming_func_of_t_default_behavior.png&quot; alt=&quot;Definition of your method using Func/Action classes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a cheap and easy &lt;strong&gt;solution for that&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Define your own delegate with same signature as &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T1,T2,T3&amp;gt;&lt;/code&gt; you are using already.&lt;/li&gt;
  &lt;li&gt;Specify intended names for these arguments (in my case arg1 could be better described as service, where arg2 is actually a token).&lt;/li&gt;
  &lt;li&gt;In original method, replace Func&lt;T&gt; with this new delegate.&lt;/T&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/naming_func_of_t_custom_named_delegate.png&quot; alt=&quot;Defining custom delegate with correct names and using it in the original method&quot; /&gt;
After these changes when you are going to use the method, you will see intellisense suggesting correct names and not generic ones.
&lt;img src=&quot;/assets/naming_func_of_t_improved_names.png&quot; alt=&quot;Now you get better names from VS as a suggestion&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;pros-and-cons&quot;&gt;Pros and Cons&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Pros&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You, your team and other people using the API that you expose (whether internally in the app or in the library or NuGet) will see better names and probably will use these names.&lt;/li&gt;
  &lt;li&gt;So code will be easier to read and maintain.&lt;/li&gt;
  &lt;li&gt;If you decide to extend the delegate, you will have to do it in one place only.&lt;/li&gt;
  &lt;li&gt;It‚Äôs fun to have smart code suggestions!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Cons&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bit of extra work and extra code&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bonus&quot;&gt;Bonus&lt;/h4&gt;
&lt;p&gt;You can have optional &lt;code class=&quot;highlighter-rouge&quot;&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt; arguments!
In the example below you can omit &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; argument completely.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/naming_func_t_bonus.png&quot; alt=&quot;Optional arguments in Func of T csharp&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2016/11/29/naming-func-action-of-t-arguments/&amp;amp;text=Named+parameters+in+Func%26lt%3BT%26gt%3B%2FAction%26lt%3BT%26gt%3B+type+in+C%23%3F%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">If you ever wondered, why Visual Studio (and Visual Studio for Mac) suggest you to name your lambda arguments with names like arg1, arg2 ‚Ä¶ argN and so on‚Ä¶

Here is a common situation where somewhere in your library or helper class you have a method taking in Func&amp;lt;T&amp;gt; or Action&amp;lt;T&amp;gt;.

and then when you want to use this method VS suggests you following names: arg1 and arg2.
Like there is nothing better than that :)


There is a cheap and easy solution for that.


  Define your own delegate with same signature as Func&amp;lt;T&amp;gt; or Func&amp;lt;T1,T2,T3&amp;gt; you are using already.
  Specify intended names for these arguments (in my case arg1 could be better described as service, where arg2 is actually a token).
  In original method, replace Func with this new delegate.



After these changes when you are going to use the method, you will see intellisense suggesting correct names and not generic ones.</summary></entry><entry><title type="html">.editorconfig support in Visual Studio 2017</title><link href="http://0.0.0.0:4000/2016/11/28/editorconfig-in-visualstudio/" rel="alternate" type="text/html" title=".editorconfig support in Visual Studio 2017" /><published>2016-11-28T00:00:00+00:00</published><updated>2016-11-28T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2016/11/28/editorconfig-in-visualstudio</id><content type="html" xml:base="http://0.0.0.0:4000/2016/11/28/editorconfig-in-visualstudio/">&lt;p&gt;Just recently, Visual Studio team published a post on &lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudio/2016/11/28/productivity-in-visual-studio-2017-rc/&quot;&gt;great features coming to the VS 2017 that will increase your productivity&lt;/a&gt;. Among those, one small but powerful feature coming to the Visual Studio.&lt;/p&gt;

&lt;p&gt;It‚Äôs .editorconfig support.
What‚Äôs so great about this?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;EditorConfig support is a good first step to support all platforms and editors of choice uniformely. Working with Xamarin apps from Windows and OS X in distributed teams, I learned hard way how tabs (gosh, again?) could be disruptive to smooth team work.&lt;/p&gt;

&lt;h4 id=&quot;what-is-editorconfig&quot;&gt;What is EditorConfig?&lt;/h4&gt;
&lt;p&gt;Quote from &lt;a href=&quot;http://editorconfig.org/&quot;&gt;EditorConfig website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, having .editorconfig in the root of your project will guarantee that any editor supporting it will comply with defined settings and will keep your codebase in the same format as team agreed.&lt;/p&gt;

&lt;h4 id=&quot;what-can-we-config-in-the-editor-then&quot;&gt;What can we config in the editor then?&lt;/h4&gt;
&lt;p&gt;EditorConfig in VS 2017 supports following settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;indent_style&lt;/li&gt;
  &lt;li&gt;indent_size&lt;/li&gt;
  &lt;li&gt;tab_width&lt;/li&gt;
  &lt;li&gt;end_of_line&lt;/li&gt;
  &lt;li&gt;charset&lt;/li&gt;
  &lt;li&gt;trim_trailing_whitespace&lt;/li&gt;
  &lt;li&gt;insert_final_newline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options&quot;&gt;Overview how to setup .editorconfig&lt;/a&gt; is available in the Microsoft Docs.&lt;/p&gt;

&lt;p&gt;I will quote one paragraph from the docs since it‚Äôs very well written:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚Ä¶ EditorConfig files enable you to maintain consistent coding styles and settings for a language ‚Ä¶ in a codebase regardless of the editor or IDE you use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;EditorConfig doesn‚Äôt support full set of C# formatting rules, so it‚Äôs not a replacement for formatting settings in VS or code formatting policy in Xamarin Studio (XS stores settings in a .sln file).&lt;/p&gt;

&lt;p&gt;I am sure we will see more tools/features coming to support different editors and environments to keep consistent coding styles.&lt;/p&gt;

&lt;p&gt;If you are interested in the topic, please read my recent article on having &lt;a href=&quot;.2016/11/13/csharp-standard-style/&quot;&gt;standard C# formatting style&lt;/a&gt; and feel free to share your opinion.&lt;/p&gt;

&lt;h5 id=&quot;additional-reading&quot;&gt;Additional reading&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;http://editorconfig.org/#download&quot;&gt;EditorConfig.org plugins for IDE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudio/2016/11/16/visual-studio-2017-rc/&quot;&gt;Overview of VS 2017 Release Candidate&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2016/11/28/editorconfig-in-visualstudio/&amp;amp;text=.editorconfig+support+in+Visual+Studio+2017%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Just recently, Visual Studio team published a post on great features coming to the VS 2017 that will increase your productivity. Among those, one small but powerful feature coming to the Visual Studio.

It‚Äôs .editorconfig support.
What‚Äôs so great about this?</summary></entry><entry><title type="html">C# Standard Style - single source of formatting truth</title><link href="http://0.0.0.0:4000/2016/11/13/csharp-standard-style/" rel="alternate" type="text/html" title="C# Standard Style - single source of formatting truth" /><published>2016-11-13T00:00:00+00:00</published><updated>2016-11-13T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2016/11/13/csharp-standard-style</id><content type="html" xml:base="http://0.0.0.0:4000/2016/11/13/csharp-standard-style/">&lt;p&gt;Months ago &lt;a href=&quot;https://www.paralect.com/team&quot;&gt;Andrew Orsich&lt;/a&gt; told me about this great tool called &lt;a href=&quot;http://standardjs.com/&quot;&gt;javascript standard style&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Absolutely amazing.&lt;/p&gt;

&lt;p&gt;What it does is just formats code with one pre-configured, non-changeable, non-customizeable, non-arguable style. &lt;strong&gt;You either use it or not&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After that, all discussions about curly braces, tabs and spaces go to void. Done.&lt;/p&gt;

&lt;p&gt;I‚Äôd like to have this for C#.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We all had enough of discussions whether use tabs or spaces (it‚Äôs still happens), where to put braces, how do we name methods and variables. I feel this is especially important now, when .NET is opensource, when C# is being used for iOS and Android development, when many of C# developers are working on Mac and Linux.&lt;/p&gt;

&lt;p&gt;Frankly, we are all already using &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff926074.aspx&quot;&gt;Microsoft C# Coding Conventions&lt;/a&gt; in some way. It‚Äôs just these slight modifications that make us spend time on formatting and arguing about these changes or undoing them.&lt;/p&gt;

&lt;p&gt;I want my team and everyone developing in C# focus on functionality and forget about formatting forever.&lt;/p&gt;

&lt;p&gt;Let‚Äôs make it happen.&lt;/p&gt;

&lt;h2 id=&quot;there-should-be-something-for-this-right&quot;&gt;There should be something for this, right?&lt;/h2&gt;

&lt;p&gt;Tools already exist, however‚Ä¶&lt;/p&gt;

&lt;p&gt;One can use Visual Studio settings and configure C# formatting. Then do the same with Xamarin Studio.(strictly speaking, having XS format C# code exactly same way as VS is not possible). 
And what about VS Code?&lt;/p&gt;

&lt;p&gt;There is an &lt;a href=&quot;https://github.com/editorconfig/editorconfig-vscode&quot;&gt;.editorconfig support for Visual Studio&lt;/a&gt; but it‚Äôs covering just part of formatting questions.&lt;/p&gt;

&lt;p&gt;ReSharper is another candidate, however, it doesn‚Äôt work with Xamarin Studio and you can customize rules.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/onovotny&quot;&gt;Oren&lt;/a&gt; kindly pointed there is a &lt;a href=&quot;https://github.com/dotnet/codeformatter&quot;&gt;dotnet/CodeFormatter project&lt;/a&gt; and &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/contributing.md&quot;&gt;Roslyn and .NET Core teams use styles&lt;/a&gt; enforced by the tool.&lt;/p&gt;

&lt;p&gt;Good old StyleCop/FxCop might be suitable as well, but again, you can and have to customize it.&lt;/p&gt;

&lt;p&gt;Unfortunately, all available tools are customizable. As long as you use them, there will be always someone who will do something his way.  Again, I want to have this binary and simple choice. Use it or don‚Äôt use it.&lt;/p&gt;

&lt;h2 id=&quot;should-we-build-another-tool&quot;&gt;Should we build another tool?&lt;/h2&gt;

&lt;p&gt;Actually, CodeFormatter is a good candidate for becoming a single source of truth. It has default rules baked in, it runs on Windows and Mono and it‚Äôs built with Roslyn and people are already using it. Here is a &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md&quot;&gt;list of rules CodeFormatter enforces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I feel like we just need to extend it and build VS extension, Xamarin Add-in and VS Code extension to make experience seamless.&lt;/p&gt;

&lt;h2 id=&quot;its-just-your-crazy-idea&quot;&gt;It‚Äôs just your crazy idea&lt;/h2&gt;

&lt;p&gt;According to the post from Roslyn team, I‚Äôm not alone&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2015/02/09/automatic-code-formatter-released-to-github/&quot;&gt;Automatic code formatter released to GitHub&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We strongly believe that having a consistent style greatly increases the readability and maintainability of a code base. The individual style decisions themselves are subjective, the key is the consistency of the decisions. As such the .NET team has a set of style guidelines for all C# code written by the team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;i-have-another-ideaopinion&quot;&gt;I have another idea/opinion&lt;/h2&gt;

&lt;p&gt;I would love to hear your feedback and thoughs on this idea. Feel free to contact me or comment this article and please share it with your team and friends.&lt;/p&gt;

&lt;h2 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h2&gt;

&lt;h4 id=&quot;i-do-not-want-to-re-format-my-solution&quot;&gt;I do not want to re-format my solution.&lt;/h4&gt;
&lt;p&gt;You don‚Äôt need to re-format existing codebase unless you want. When you start your next project, this is the best time to start using C# Standard Format.&lt;/p&gt;

&lt;h4 id=&quot;why-we-should-enforce-style-a-and-not-enforce-style-b&quot;&gt;Why we should enforce style A and not enforce style B.&lt;/h4&gt;

&lt;p&gt;Discussing specific style settings is not the goal of this post.&lt;/p&gt;

&lt;h4 id=&quot;i-will-not-use-this-c-standard-formatting&quot;&gt;I will not use this C# standard formatting.&lt;/h4&gt;

&lt;p&gt;Fine, it‚Äôs ‚Äúuse it or don‚Äôt‚Äù. Nothing will change for people that don‚Äôt want to use a non-customizeable set of rules. A lot of free time will come to those that want to use it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you liked this post, you can
&lt;a href=&quot;https://twitter.com/intent/tweet?url=http://0.0.0.0:4000/2016/11/13/csharp-standard-style/&amp;amp;text=C%23+Standard+Style+-+single+source+of+formatting+truth%0A&amp;amp;via=alexsorokoletov&quot; target=&quot;_blank&quot;&gt;
  share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/alexsorokoletov&quot;&gt;
  follow me on Twitter&lt;/a&gt;!&lt;/p&gt;</content><author><name>Alex Sorokoletov</name><email>alex@sorokoletov.com</email></author><summary type="html">Months ago Andrew Orsich told me about this great tool called javascript standard style.

Absolutely amazing.

What it does is just formats code with one pre-configured, non-changeable, non-customizeable, non-arguable style. You either use it or not.

After that, all discussions about curly braces, tabs and spaces go to void. Done.

I‚Äôd like to have this for C#.</summary></entry></feed>
